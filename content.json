{"meta":{"title":"Roy's Home","subtitle":"Less is more","description":"Less is more","author":"Roy","url":"https://royccg.github.io"},"pages":[{"title":"文章标签","date":"2020-04-10T13:21:55.000Z","updated":"2022-08-19T07:44:09.567Z","comments":false,"path":"tags/index.html","permalink":"https://royccg.github.io/tags/index.html","excerpt":"","text":""},{"title":"About Me","date":"2020-04-11T06:09:24.000Z","updated":"2022-10-17T01:53:25.067Z","comments":true,"path":"about/index.html","permalink":"https://royccg.github.io/about/index.html","excerpt":"","text":"It is not our abilities that show what we truly are. It is our choices. Harry Potter and the Chamber of Secrets 工作相关及个人感兴趣的方向编程类 Python 对 AutoCAD的插件开发； Python对 三维软件FreeCAD的 Workbench的开发（市政工程设计类）； Python 对 桥梁设计类的计算插件的开发； 学术类 抗震质量阻尼器在大跨度桥梁上的参数优化； 工程类 全装配式桥梁在市政工程桥梁上的应用设计实践；"}],"posts":[{"title":"FreeCAD--一个开源的3D参数化建模软件","slug":"FreeCAD--一个开源的3D参数化建模软件","date":"2023-03-12T08:58:22.000Z","updated":"2023-03-12T12:07:35.163Z","comments":true,"path":"2023/03/12/FreeCAD--一个开源的3D参数化建模软件/","link":"","permalink":"https://royccg.github.io/2023/03/12/FreeCAD--%E4%B8%80%E4%B8%AA%E5%BC%80%E6%BA%90%E7%9A%843D%E5%8F%82%E6%95%B0%E5%8C%96%E5%BB%BA%E6%A8%A1%E8%BD%AF%E4%BB%B6/","excerpt":"介绍 FreeCAD 是一个通用的开源化的参数化3D CAD 建模软件，软件遵循 LGPL许可 。FreeCAD 的功能主要是针对 机械工程和产品设计，但也适用于更广泛的工程用途，例如建筑、有限元分析、3D打印等其他方面的设计工作。 FreeCAD 具有类似于 CATIA、SoildWorks的工具，因此属于CAD、PLM、CAx、CAE的类软件，是一个基于特征的参数化建模软件，具有模块化的软件架构，可以在不修改核心系统的情况下提供额外的功能。","text":"介绍 FreeCAD 是一个通用的开源化的参数化3D CAD 建模软件，软件遵循 LGPL许可 。FreeCAD 的功能主要是针对 机械工程和产品设计，但也适用于更广泛的工程用途，例如建筑、有限元分析、3D打印等其他方面的设计工作。 FreeCAD 具有类似于 CATIA、SoildWorks的工具，因此属于CAD、PLM、CAx、CAE的类软件，是一个基于特征的参数化建模软件，具有模块化的软件架构，可以在不修改核心系统的情况下提供额外的功能。 与许多CAD建模软件一样，它有许多的2D组件，以便绘制平面形状草图或创建生产图纸。但是，对于2D绘图不是此软件的重点（优势），动画（渲染）或网格编辑（如Blender、Maya、3ds Max或者Cinema 4D）也不是此软件的主要开发内容。但由于其广泛的适应性，FreeCAD可能在更多的领域内获得关注和发挥作用。 FreeCAD使用了大量关于科学计算的开源库，其中包络功能强大的CAD内核Open Cascad Technology(OCCT)；Coin3D ，一个与Open Inventor兼容的3D图形开发工具包；QT，著名的用户截面UI框架；和 Python，一种现代脚本语言。FreeCAD本身也可以用作其他程序的参考库。 FreeCAD 也是多平台的，目前在 Linux/Unix、Windows 和 macOS 系统上运行，在所有平台上具有相同的外观和功能。 特色 多平台：FreeCAD可以在多平台（Windows、Linux、macOS等其他平台）运行，并且彼此没有差别。 全GUI操作：FreeCAD有基于Qt框架的完整图形的用户界面，带有基于Open Inventor的3D查看界面；并允许快速渲染3D场景和费用易于访问的场景图。 可通过命令行运行：在命令行模式下，FreeCAD 运行时不展示界面，但可以完成所有的几何工具。在这种模式下，它的内存占用相对较低，例如，可以用作服务器来为其他应用程序生成内容。 可以作为Python的模块导入：FreeCAD 可以导入到任何可以运行 Python 脚本的应用程序中。与命令行模式一样，FreeCAD 的界面部分不可用，但可以访问所有几何工具。 工作台：在 FreeCAD 界面中，工具按工作台分组。这允许您仅显示用于完成特定任务的工具，保持工作区整洁和响应迅速，并允许应用程序快速加载。 用于延迟加载功能/数据类型的插件/模块框架： FreeCAD 分为一个核心应用程序，其中包含仅在需要时才加载的模块。几乎所有工具和几何类型都存储在模块中。模块表现得像插件；除了延迟加载之外，还可以在现有的 FreeCAD 安装中添加或删除单个模块。 参数关联文档对象：FreeCAD 文档中的所有对象都可以通过参数定义。这些参数可以随时修改和重新计算。由于保持了对象关系，因此对一个对象的修改将自动更新到一切从属对象。 参数化建模：可以通过指定几何约束来创建基本对象，例如长方体、球体、圆柱体等。 图形修改操作： FreeCAD 可以在 3D 空间的任何平面中执行平移、旋转、缩放、镜像、偏移或形状转换。 构造实体几何（布尔运算）： FreeCAD 可以进行建设性的实体几何操作（合并、差异、交叉）。 平面几何图形的创建：可以在 3D 空间的任何平面中以图形方式创建直线、导线、矩形、B 样条曲线和圆弧或椭圆弧。 使用直线或旋转拉伸、截面和圆角建模。 拓扑组件：如顶点、边、线和平面。 测试和修复： FreeCAD 具有用于测试网格（实体测试、非双流形测试、自相交测试）和修复网格（孔填充、统一方向）的工具。 注释：FreeCAD 可以为文本或尺寸插入注释。 撤消/重做框架： FreeCAD 中的所有内容都是可撤销/可重做的，用户可以访问撤销堆栈。可以一次撤消多个步骤。 与事务处理相关：撤消/重做堆栈存储文档事务，而不是单个操作，允许每个工具准确定义必须撤消或重做的内容。 内置脚本框架： FreeCAD 具有内置的 Python 解释器，其 API 几乎涵盖了应用程序的任何部分、界面、几何图形以及该几何图形在 3D 查看器中的表示。解释器可以运行复杂的脚本以及单个命令；整个模块可以完全用 Python 编程。 内置 Python 控制台：Python 解释器包括一个带有语法高亮、自动完成和类浏览器的控制台。 Python 命令可以直接在 FreeCAD 中输入并立即返回结果，允许脚本编写者即时测试功能、探索 FreeCAD 模块的内容并轻松了解 FreeCAD 内部结构。 反映用户交互：用户在 FreeCAD 界面中所做的一切都执行 Python 代码，这些代码可以打印在控制台上并记录在宏中。 完整的宏录制和编辑功能：可以记录用户操作界面时发出的 Python 命令，如果需要可以进行编辑，并保存以备日后重现。 复合（基于 ZIP）文档保存格式： FreeCAD 文档以 .FCStd 扩展名保存。该文档可以包含许多不同类型的信息，例如几何、脚本或缩略图图标。.FCStd文件本身就是一个 zip 容器；保存的 FreeCAD 文件已经被压缩。 完全可定制/可编写脚本的图形用户界面： FreeCAD 基于 Qt 的界面完全可以通过 Python 解释器访问。除了 FreeCAD 本身提供给工作台的简单功能外，整个 Qt 框架都是可访问的。用户可以在 GUI 上执行任何操作，例如创建、添加、停靠、修改或删除小部件和工具栏。 缩略图（目前只有 Linux 系统）: FreeCAD 文档图标在大多数文件管理器应用程序中显示文件的内容，例如 Gnome 的 Nautilus。 模块化 MSI 安装程序： FreeCAD 的安装程序允许在 Windows 系统上灵活安装，还维护了 Ubuntu 系统的软件包。 工具台 Sketcher（草图）：带有集成约束求解器的草绘器，允许您绘制受几何约束的 2D 形状草图。使用 Sketcher 构建的受约束的 2D 形状可以用作在整个 FreeCAD 中构建其他对象的基础。 Draft Workench ：包含 2D 工具以及基本的 2D 和 3D CAD 操作。 Part：用于处理 CAD 零件的零件工作台。 Part Design：用于从草图构建零件形状的零件设计工作台。 BIM（建筑与施工）：旨在在 FreeCAD 中实施完整的建筑信息模型 (BIM) 工作流程。它扩展了 Arch Workbench，并收集了来自其他工作台的工具，以提供一个便于建模建筑和使用 IFC 文件的环境。…. 参考文献 [1] FreeCAD的官网 [2] FreeCAD的OverView [3] FreeCAD的工具台介绍 [4] FreeCAD的论坛","categories":[],"tags":[{"name":"FreeCAD","slug":"FreeCAD","permalink":"https://royccg.github.io/tags/FreeCAD/"},{"name":"Bridge","slug":"Bridge","permalink":"https://royccg.github.io/tags/Bridge/"},{"name":"Civil Desigen","slug":"Civil-Desigen","permalink":"https://royccg.github.io/tags/Civil-Desigen/"}],"keywords":[]},{"title":"无用的『迷茫』，认清自己","slug":"无用的迷茫，认清自己","date":"2022-10-16T13:18:48.000Z","updated":"2022-10-16T14:54:11.099Z","comments":true,"path":"2022/10/16/无用的迷茫，认清自己/","link":"","permalink":"https://royccg.github.io/2022/10/16/%E6%97%A0%E7%94%A8%E7%9A%84%E8%BF%B7%E8%8C%AB%EF%BC%8C%E8%AE%A4%E6%B8%85%E8%87%AA%E5%B7%B1/","excerpt":"It is not our abilities that show what we truly are. It is our choices.","text":"It is not our abilities that show what we truly are. It is our choices. Yesterday is history, tomorrow is a mystery, today is God's gift, that's why we call it the present. 迷茫是人生的伴侣，逃避是直觉的选择。但人生是一场注定了目的地的旅程，如果一直萎缩着不敢遥望窗外，那留下的就只有谢幕仪式。","categories":[],"tags":[{"name":"生活","slug":"生活","permalink":"https://royccg.github.io/tags/%E7%94%9F%E6%B4%BB/"}],"keywords":[]},{"title":"离开「上海」","slug":"离开「上海」","date":"2022-06-16T14:47:51.000Z","updated":"2022-08-19T09:04:56.650Z","comments":true,"path":"2022/06/16/离开「上海」/","link":"","permalink":"https://royccg.github.io/2022/06/16/%E7%A6%BB%E5%BC%80%E3%80%8C%E4%B8%8A%E6%B5%B7%E3%80%8D/","excerpt":"6月7日，怀着 别扭的 心情，乘上了 上海虹桥开往山东济南的高铁。说起别样，一半是 感觉离开了上海两个月，应该能避开接下来一系列的〝骚操作〞;一半是对到达山东之后的，又不知道会如何处置。虽说，打了一万份的心理准备，全国人民对上海还是非常〝热情〞的，但人，总是扭捏地面对一个未知的处置。","text":"6月7日，怀着 别扭的 心情，乘上了 上海虹桥开往山东济南的高铁。说起别样，一半是 感觉离开了上海两个月，应该能避开接下来一系列的〝骚操作〞;一半是对到达山东之后的，又不知道会如何处置。虽说，打了一万份的心理准备，全国人民对上海还是非常〝热情〞的，但人，总是扭捏地面对一个未知的处置。 去山东的高铁上，坐满了归乡的打工人。对一个封闭了近三个月的人来说，这也是一个大场面了。这些谈笑的老男孩，脸上挂着的不知道是离开的惬意，还是接下来的无奈。隔壁的大哥，看我提着一个大箱子，背着一个大包，又穿着大白服，问我:〝带的东西挺全啊。〞我尴尬的回着:〝之前看微博上说，方舱里面什么都没有，我就什么都带了。〞大哥尴尬的说:〝不会吧，我就带了一个小包。你去哪的啊。〞〝济南，终点站。你呢〞我回着。〝我在前一站，泰安。〞我坐进了靠窗的a座，戴上了耳机，等待着列车的启动。 车上坐满了人，大多都是打工人，车上的氛围还是比较轻松的，这些跟我爸差不多年纪的〝老男孩〞恰然地谈论着，有些是开了一个月的工，有些是半个月，有个说只干了不到5天就关了。还讨论了那些日子，一天吃几顿，说完哈哈哈大笑。或许此时他们是放松的，心里还是怀着能回家的喜悦，岁月给这些老男孩留下了许多印记，也添加了一份谈资，或许就是下次教训家里后辈的时候，说出来的例子了。 前面的大哥，打了个电话，对面大概是家里的老婆，电话里安慰着家里人，没事的，回家了之后再考虑去那继续拼搏。两个多月，对他们这种全勤的人来说，意味着太多了。 下午的五点多，到里济南，下站的人被简单的排好队之后，就被拉到了淄博，9点多终于下车了，这就是我要待首个7天的地方。","categories":[],"tags":[{"name":"生活","slug":"生活","permalink":"https://royccg.github.io/tags/%E7%94%9F%E6%B4%BB/"},{"name":"疫情","slug":"疫情","permalink":"https://royccg.github.io/tags/%E7%96%AB%E6%83%85/"}],"keywords":[]},{"title":"Docker-gitlab部属","slug":"Docker-gitlab部属","date":"2020-12-10T12:37:00.000Z","updated":"2022-08-19T07:44:09.303Z","comments":true,"path":"2020/12/10/Docker-gitlab部属/","link":"","permalink":"https://royccg.github.io/2020/12/10/Docker-gitlab%E9%83%A8%E5%B1%9E/","excerpt":"前言最近在折腾Git,想对自己的代码版本进行托管和版本控制，准备在Ubuntu server 利用Docker上搭建一个GitLab。 平台 操作系统： Ubuntu 20.04.1 server Docker Version ：20.10.0, build 7287ab3 Gitlab Version：13.6.2","text":"前言最近在折腾Git,想对自己的代码版本进行托管和版本控制，准备在Ubuntu server 利用Docker上搭建一个GitLab。 平台 操作系统： Ubuntu 20.04.1 server Docker Version ：20.10.0, build 7287ab3 Gitlab Version：13.6.2 Dockerdocker用来隔离应用还是比较方便的，一来本身的操作较为简单，二来资源占用也比虚拟机要小的多，三来是较为安全。 安装Docker我采用的是Ubuntu 20发行版本此处采用 国内daocloud 一键安装命令： 1curl -sSL https://get.daocloud.io/docker | sh 或者使用 官方的安装脚本自动安装1curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun 注意： 如果要使用 Docker作为非root用户使用，则应考虑使用以下方式将用户添加到docker组：1sudo usermod -aG docker your-user 更换源国内的镜像源有 docker官方中国区 https://registry.docker-cn.com 网易 http://hub-mirror.c.163.com ustc http://docker.mirrors.ustc.edu.cn 阿里云 http://&lt;你的ID&gt;.mirror.aliyuncs.com 通用的方法就是编辑/etc/docker/daemon.json：12345678910111213&#123; &quot;registry-mirrors&quot; : [ &quot;http://registry.docker-cn.com&quot;, &quot;http://docker.mirrors.ustc.edu.cn&quot;, &quot;http://hub-mirror.c.163.com&quot; ], &quot;insecure-registries&quot; : [ &quot;registry.docker-cn.com&quot;, &quot;docker.mirrors.ustc.edu.cn&quot; ], &quot;debug&quot; : true, &quot;experimental&quot; : true&#125;然后重启docker即可。1service docker restart Gitlab安装下载镜像 使用如下命令可以使 Docker安装 Gitlab 镜像 gitlab 镜像分为两个版本： gitlab-ce 社区版 gitlab-ee 企业收费版此处采用社区版本即可，直接安装官方镜像，拉取gitlab-ce源1docker pull gitlab/gitlab-ce 创建目录通常会将Gitlab的配置(etc)、日志(log)、数据(data)放在容器之外，便于日后升级，因此先准备这三个目录123mkdir -p /srv/gitlab/configmkdir -p /srv/gitlab/logsmkdir -p /srv/gitlab/data 启动运行12345678910docker run --detach \\ --hostname 192.xxx.xx.xx \\ --publish 8443:443 --publish 8880:8880 --publish 8222:22 \\ --name gitlab \\ --restart always \\ --volume /srv/gitlab/config:/etc/gitlab \\ --volume /srv/gitlab/logs:/var/log/gitlab \\ --volume /srv/gitlab/data:/var/opt/gitlab \\ --privileged=true \\ gitlab/gitlab-ce:latest 说明： —hostname gitlab.example.com: 设置主机名或域名 —publish 8443:443：将http：443映射到外部端口8443 —publish 8880:8880：将web：8880映射到外部端口8880 （此处两个端口号必须一致，不然后面有问题） —publish 8222:22：将ssh：22映射到外部端口8222 —name gitlab: 运行容器名 —restart always: 自动重启 —volume /srv/gitlab/config:/etc/gitlab: 挂载目录 —volume /srv/gitlab/logs:/var/log/gitlab: 挂载目录 —volume /srv/gitlab/data:/var/opt/gitlab: 挂载目录 —privileged=true 使得容器内的root拥有真正的root权限。否则，container内的root只是外部的一个普通用户权限 运行成功之后，可以使用下面的命令查看容器运行状态：1docker ps -a可以看到 GitLab 已经在运行了，有一个属性 STATUS 为 health: starting，说明 gitlab 的服务正在启动中，还没有启动完毕。等这个状态变成 healthy 时则说明已经部署完成，可以访问了。 访问gitlab启动成功后，浏览器访问http://ip:8880, 即可访问。为了使用域名访问，需要配置nginx：1234567891011121314151617upstream gitlab&#123; server 127.0.0.1:8880;&#125;server &#123; listen 80; server_name gitlab.example.com; access_log /var/log/nginx/gitlab.example.com-access.log; error_log /var/log/nginx/gitlab.example.com-error.log; location / &#123; proxy_pass_header Server; proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Scheme $scheme; proxy_pass http://gitlab; &#125;&#125;nginx重启配置生效后，浏览器访问http://gitlab.example.com 即可正常访问。（此处 并没有尝试） 首次访问需要为root用户设置密码，设置完成后需要登录，默认用户名为：root， 密码为刚刚设置的密码。 配置邮件服务器想要让 GitLab 给你发送邮件，还要配置一下邮件服务器，这里以QQ邮箱的 IMAP/SMTP服务 来配置。 打开邮箱-&gt;设置-&gt;账户，然后开启 IMAP/SMTP服务，然后根据文档获取 授权码 ，这步比较重要。 1234567891011### Email Settingsgitlab_rails[&#x27;smtp_enable&#x27;] = true # 开启 SMTP 功能gitlab_rails[&#x27;smtp_address&#x27;] = &quot;smtp.qq.com&quot;gitlab_rails[&#x27;smtp_port&#x27;] = 465 # 端口不可以选择587，测试过会发送邮件失败gitlab_rails[&#x27;smtp_user_name&#x27;] = &quot;test@qq.com&quot; # 你的邮箱账号gitlab_rails[&#x27;smtp_password&#x27;] = &quot;1324dasd&quot; # 授权码，不是密码gitlab_rails[&#x27;smtp_authentication&#x27;] = &quot;login&quot;gitlab_rails[&#x27;smtp_enable_starttls_auto&#x27;] = truegitlab_rails[&#x27;smtp_tls&#x27;] = truegitlab_rails[&#x27;gitlab_email_from&#x27;] = &#x27;test@qq.com&#x27; # 发件人信息，必须跟‘smtp_user_name’保持一致，否则报错gitlab_rails[&#x27;smtp_domain&#x27;] = &quot;qq.com&quot; # 修改并不影响 配置完成后保存，然后输入下面的命令使配置生效。1sudo docker exec gitlab gitlab-ctl reconfigure使配置生效之后我们可以使用 gitlab 自带的工具进行一下测试。依次执行下面的命令：12345678# 开启 gitlab 的 bash 工具$ docker exec -it gitlab bash# 开启 gitlab-rails 工具$ gitlab-rails console production# 发送邮件进行测试Notify.test_email(&#x27;test_001@123.com&#x27;, &#x27;Message Subject&#x27;, &#x27;Message Body&#x27;).deliver_now测试完成之后退出gitlab的bash工具，重启 gitlab 即可。1docker restart gitlab 配置Git仓库访问路径在之前第一次运行 gitlab 容器的时候，有一个参数 hostname 为 gitlab.example.com , 如果配置了域名可以忽略这一步，如果你没有配置相应域名的话，你的仓库的地址将会变为下面这样：12ssh : git@gitlab.example.com:test/test.githttp：gitlab.example.com/test/test.git如果域名不存在的话，这个地址是无法进行 clone 的。 为了解决这个问题，我们可以设置成 IP 或 你配置了的域名来访问。 打开文件 /srv/gitlab/config/gitlab.rb 文件并找到1external_url &#x27;GENERATED_EXTERNAL_URL&#x27;这行，去掉注释，并按照下面的格式修改。1234567891011# ip 形式external_url &#x27;http://192.168.1.44&#x27;# 域名形式external_url &#x27;http://JemGeek.com&#x27;# 子域名external_url &#x27;http://gitlab.JemGeek.com&#x27;# 其他形式external_url &#x27;http://JemGeek.com/gitlab&#x27; 如果 使用ip:8880登录，则external_url和nginx[‘listen_port’]的端口需要和第一步的映射端口对应。 1234567891011// 修改如下语句external_url &#x27;http://ip:8880&#x27;# https需要下面这句# nginx[&#x27;redirect_http_to_https_port&#x27;] = 8880nginx[&#x27;listen_port&#x27;] = 8880nginx[&#x27;listen_addresses&#x27;] = [&#x27;*&#x27;]gitlab_rails[&#x27;gitlab_ssh_host&#x27;] = &#x27;192.168.20.132&#x27; 重启镜像1docker restart gitlab 升级参照官方的说明，将原来的容器停止，然后删除：12docker stop gitlabdocker rm gitlab 然后重新拉一个新的版本的镜像下来1docker pull gitlab/gitlab-ce 然后使用原来的运行命令运行：12345678910docker run --detach \\ --hostname 192.xxx.xx.xx \\ --publish 8443:443 --publish 8880:8880 --publish 8222:22 \\ --name gitlab \\ --restart always \\ --volume /srv/gitlab/config:/etc/gitlab \\ --volume /srv/gitlab/logs:/var/log/gitlab \\ --volume /srv/gitlab/data:/var/opt/gitlab \\ --privileged=true \\ gitlab/gitlab-ce:latest","categories":[],"tags":[{"name":"vps","slug":"vps","permalink":"https://royccg.github.io/tags/vps/"},{"name":"Docker","slug":"Docker","permalink":"https://royccg.github.io/tags/Docker/"},{"name":"gitlab - git","slug":"gitlab-git","permalink":"https://royccg.github.io/tags/gitlab-git/"}],"keywords":[]},{"title":"论中国人痴迷的“国外来函”","slug":"论中国人痴迷的“国外来函”","date":"2020-06-29T02:30:00.000Z","updated":"2022-08-19T07:44:09.440Z","comments":true,"path":"2020/06/29/论中国人痴迷的“国外来函”/","link":"","permalink":"https://royccg.github.io/2020/06/29/%E8%AE%BA%E4%B8%AD%E5%9B%BD%E4%BA%BA%E7%97%B4%E8%BF%B7%E7%9A%84%E2%80%9C%E5%9B%BD%E5%A4%96%E6%9D%A5%E5%87%BD%E2%80%9D/","excerpt":"前段时间，在家族微信群中看到一条抖音，大体讲的是2007年底，上海市政工程管理局收到英国霍华思公司发来“提醒函”，提醒外白渡桥的使用年限到期，需要修缮，并且寄来设计图纸。内心百感交集，为什么在2020年的今天，国人还在痴迷着“青岛排水系统”的传说，不假思索。笔者便借此机会，将外白渡桥的修缮历史梳理一下。","text":"前段时间，在家族微信群中看到一条抖音，大体讲的是2007年底，上海市政工程管理局收到英国霍华思公司发来“提醒函”，提醒外白渡桥的使用年限到期，需要修缮，并且寄来设计图纸。内心百感交集，为什么在2020年的今天，国人还在痴迷着“青岛排水系统”的传说，不假思索。笔者便借此机会，将外白渡桥的修缮历史梳理一下。 上海外白渡桥 1 外白渡桥 ，是中国第一座全钢结构铆接桥梁2和仅存的不等高桁架结构桥，同时也是自1856年以来的在苏州河河口附近同样位置落成的第四座桥梁。由于处于苏州河与黄浦江的交界处，因此成为链接黄埔与虹口的重要交通要道。 现在的外白渡桥于1908年1月20日落成通车。由于其丰富的历史和独特的设计，外白渡桥成为上海的标志之一，同时也是上海的现代化和工业化的象征。 外白渡桥的修缮历史一个屹立于上海滩100年的外白渡桥，其使用年限本只有50年，要想保证可靠的工作状态，早就经历过几次维修。自1940年代以来，外白渡桥共经历五次主要的维修，最近的一次便是2008年的大修。 1947年在1947年，也就是通车40年之时，上海市政府做了一次检查，发现桥梁的结构出现沉降，较之1907年的时候，桥基础已经下沉将近12.7厘米。1947年6月，市政府与一家私营公司签订合同，由该公司负责对桥梁的维修，以加固桥梁结构，防止进一步下沉。此后，除了1949年扩大人行道以外，该公司再未进行进一步的维修。 1949年至1980年 1957年，上海市人民政府工程局联合上海市工程设计研究院，对外白渡桥进行了一次深入的研究，随后采取了一定措施，防止桥梁老化，使该桥能继续使用50年。 1964年，外白渡桥拆除，移入造船厂进行大修，这次大修以后，取消了原先经由外白渡桥通行的电车线路。 1965年，木质的人行道拆除，更换为钢筋混凝土材质的人行道，同时对桥梁进行了一次粉刷。 1970年，外白渡桥再度进行了喷漆维修，这次修缮工作主要是将生锈的部分钢结构替换，并喷涂锌质防锈液。 1977年，上海市政设计研究院则对大桥的横梁进行了一次加固措施。3 百年大修（2008年至2009年）前几次的修缮工作，从未传出由什么原来的设计公司送来 “提醒函” ，唯独着百年大修却传出了这个令人感慨的 事件。 由于上海将于2010年举办 上海世博会 ，同时鉴于中山东一路地区的交通压力，上海市政府决定对外滩地区进行交通综合改造。由于新建的外滩通道将穿越外白渡桥下方，加之外白渡桥的桥墩经过勘察发现已经老化严重，因此市政府决定对外白渡桥进行大修。 根据2008年《上海日报》的报道：“尽管桥龄已逾100年，但最近的一份质量检查结果显示，即使不对桥梁进行较大的维修，外白渡桥扔能安全地使用30年。”此次大修地主旨是“恢复和加强原有的风格”，这次大修经国家文物局批准，唯一地限制是“桥身与水面净高不变”。 2009年2月25日6时30分，在民生码头经过为期一年左右地大修，外白渡桥北跨开始移桥复位。晚上18时许，北跨桥身完成固定。翌日，南跨也回归原址。4月8日，大修完成后的外白渡桥重新向行人开放。4月11日凌晨，外白渡桥恢复机车通行。此次长达10个月大修，是自1907年外白渡桥建成以来，对这座重约1000多吨地老桥最彻底地一次维修。 针对“提醒函”的几点说明 自1907年外白渡桥建成以来，外白渡桥先后经历过5次大维修，都是组织国内的专家进行，并且从未有传出什么国外的原设计单位送来图纸以及“提醒函”的传说。 并且外白渡桥的实际设计年限是50年，那么送来“提醒函”的准确时间应该时上个世纪60年代，而不是2008年。 2008年对外白渡桥的维修时机，也不是针对的所谓的100年的设计年限来临，而是为了解决2010年的上海世博会期间的交通压力等更为实际的原因。 那么这封 神秘的提醒函的消息到底是怎么传出来的呢？笔者从网上进行搜索，发现网上确实都是这样的消息，但是都是一样的说辞，却没有一个说出消息的来源。但能找到的最早的消息包括以下两个： 以上一个是 东方网 的一篇由实习生选稿的 新闻，一个是刊登在《工业安全与环保》的2008年第06期的 唐宗礼的稿件，但是其中也是用了 据报道这样没有出处的字眼，提到的时间是去年年底。由于作者没有留下任何的通讯方式，以及刊物不太会受理查询此事，也只能就此作罢。 类似的传说4,5 青岛的“德国下水道” “90岁”的北京“洋灰桥” “96岁”的武汉景明大楼 “80岁”的广州海珠桥 以上，是收集到的网络上盛传的“提醒函”事件，其中大部分都是：直接开始“讲故事”，没有确切的事件的出处，然后吐槽国内。荒唐的是故事中的主角有：“钢材企业”，“设计师的后人”等，各种角度刁钻的人物，其实细想都是漏洞百出，有些都不管“时间”上的漏洞，直接硬说硬来。 行业的思考首先，作为土木行业的一员，针对出现的这种荒唐的现象，其实是有些羞愧的。在基建快速发展的那些年，由于国内的需求快速爆发，并且施工工期短，监督机制的缺失，资金大量的聚集，确实出现了很多“豆腐渣”工程，但这是一个国家发展过程中的“阵痛”现象。就像丑陋的美国人、丑陋的日本人到丑陋的中国人的传递发展一样，这些在相应的时期出现的问题本身就需要通过一代人的时间去消化。 其次，这两年出现的事故：“江苏无锡312国道侧翻事故”、”虎门大桥的‘涡振’事件“，这些事件确实刺激着人民的神经，其中夹杂着设计、施工、运营等的多方面的问题，也在很大程度上警示着从业人员，道路阻且长。 再次，是媒体集聚效应。一个热点的出现，往往带来更多相关的热点，这在一定程度上对行业起到了监督的作用，但是由于一些媒体对自己不熟悉的专业上，发表的不专业的评论，引导了群众产生了一定程度的“偏见”。并且，由于如今的网络时代的大爆发，很多“故事”就那么顺利的传递开了，自古以来也是如此。 最后，作为一个“桥梁人”，对于生命线工程的桥梁，确实承担着很大的责任，任重而道远。加油，打工人！ 参考 [1] Wikipedia [2] 《上海年鉴》编纂委员会. 二十八、城市管理&gt;&gt;（八）市政设施管理.《上海年鉴（2004）》. 上海年鉴社. [2004] [2016-11-14]. ISSN 1008-1046 [3] 上海外白渡桥：百年老图纸成为“镇馆之宝”-2008年2月29日《解放军报》 [4] 旧管道需要安全提醒函 - 张田勘 [5] 我们离“安全提醒函”有多远 - 李健","categories":[],"tags":[{"name":"施工","slug":"施工","permalink":"https://royccg.github.io/tags/%E6%96%BD%E5%B7%A5/"},{"name":"桥梁","slug":"桥梁","permalink":"https://royccg.github.io/tags/%E6%A1%A5%E6%A2%81/"},{"name":"媒体","slug":"媒体","permalink":"https://royccg.github.io/tags/%E5%AA%92%E4%BD%93/"}],"keywords":[]},{"title":"Python中的正则表达式","slug":"Python中的正则表达式","date":"2020-06-26T13:51:07.000Z","updated":"2022-08-19T07:44:09.303Z","comments":true,"path":"2020/06/26/Python中的正则表达式/","link":"","permalink":"https://royccg.github.io/2020/06/26/Python%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","excerpt":"使用python对字符串进行处理中，正则表达式的使用是十分有必要的，此处将小做归纳整理。","text":"使用python对字符串进行处理中，正则表达式的使用是十分有必要的，此处将小做归纳整理。 正则表达式的概念 正则表达式 Regular Expression regex RE 正则表达式是用来简洁表达一组字符串的表达式。 通用的字符串表达框架 简洁表达一组字符串的表达式 针对字符串表达“简洁”和“特征”思想的工具 判断某字符串的特征归属 正则表达式在文本处理中十分常用 表达文本类型的特征（病毒、入侵等） 同时查找或替换一组字符串 匹配字符串的全部或部分 正则表达式的使用 编译：将符合正则表达式语法的字符串转换成正则表示特征 正则表达式的语法正则表达式是由字符和 操作符组成的 操作符 说明 实例 . 表示任何单个字符 [] 字符集，对单个字符给出取值范围 [abc]表示a、b、c，[a-z]表示a到z单个字符 [^] 非字符集，对单个字符给出排除范围 [^abc]表示非a或b或c的单个字符 * 前一个字符0次或无限次扩展 abc*表示ab、abc、abcc、abccc等 + 前一个字符1次货无限次扩展 abc+表示abc、abcc、abccc等 ? 前一个字符0次货1次扩展 abc?表示ab、abc &amp;#124 左右表达式任意一个 abc &amp;#124 def `表示abc、def &#123;m&#125; 扩展前一个字符m次 ab&#123;2&#125;c表示abbc &#123;m,n&#125; 扩展前一个字符m至n次（含n） ab&#123;1,2&#125;c表示abc、abbc ^ 匹配字符串开头 ^abc表示abc且在一个字符串的开头 $$` 匹配字符串结尾 `abc$$表示abc且在一个字符串的结尾 () 分组标记，内部职能使用 &amp;# 124 操作符 (abc)表示abc，(abc&amp;#124 def) 表示abc、def \\d 数字，等价于 [0-9] \\w 单词字符，等价于 [A-Za-z0-9] 经典正则表达式实例 匹配IP地址的正则表达式IP地址字符串形式的正则表达式（IP地址分4段，每段0-255） 精确写法 0-99: [1-9]?\\d 100-199: 1\\d&#123;2&#125; 200-249: 2[0-4]\\d 250-255：25[0-5] 1(([1-9]?\\d|1\\d&#123;2&#125;|2[0-4]\\d|25[0-5]).)&#123;3&#125;([1-9]?\\d|1\\d&#123;2&#125;|2[0-4]\\d|25[0-5]) Re库的使用 Re库是Python的标准库，主要用于字符串匹配1import re 正则表达式的表示类型raw string类型（原生字符串类型）re库采用raw string类型表示正则表达式，表示为r&quot;text&quot;例如： r&#39;[1-9]\\d&#123;5&#125;&#39; r&#39;\\d&#123;3&#125;-\\d&#123;8&#125;|\\d&#123;4&#125;-\\d&#123;7&#125;&#39; raw string是不包括转义符的字符串 string类型，更繁琐例如 &#39;[1-9]\\\\d&#123;5&#125;&#39; &#39;\\\\d&#123;3&#125;-\\\\d&#123;8&#125;|\\\\d&#123;4&#125;-\\\\d&#123;7&#125;&#39; Re库主要功能函数 函数 说明 re.search() 在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象 re.match() 从一个字符串的开始位置起匹配正则表达式，返回match对象 re.findall 搜索字符串，以列表类型返回全部能匹配的子串 re.split() 将一个字符串按照正则表达式匹配结果进行分割，返回列表类型 re.finditer() 搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是match对象 re.sub() 在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串 re.search()re.search(pattern, string, flags=0) 在一个字符串中搜索匹配正则表达式的第一个位置，返回match对象 pattern：正则表达式的字符串或原生字符串表示 string：待匹配字符串 flags：正则表达式使用时的控制标记 常用标记 说明 re.I re.IGNORECASE 忽略正则表达式的大小写，[A-Z]能匹配小写字符 re.M re.MULTILINE 正则表达式中的^操作符能够将给定字符串的每行当做匹配开始 re.S re.DOTALL 正则表达式中的.操作符能够匹配所有字符，默认匹配除换行外的所有字符 123456import rematch = re.search(r&#x27;[1-9]\\d&#123;5&#125;&#x27;, &#x27;BIT 100081&#x27;)if match: print(match.group(0))100081 re.match()1re.match(pattern, string, flags=0) 从一个字符串的开始位置起匹配正则表达式，返回match对象。 pattern：正则表达式的字符串或原生字符串表示； string: 待匹配字符串； flags: 正则表达式使用时的控制标记。 12345import rematch = re.match(r&#x27;[1-9]\\d&#123;5&#125;&#x27;, &#x27;100081 BIT&#x27;)if match: match.group(0)&#x27;100081&#x27; re.findall()re.findall(pattern, string, flags = 0)搜索字符串，以列表类型返回全部能匹配的子串。 123456import rels = re.findall(r&#x27;[1-9]\\d&#123;5&#125;&#x27;, &#x27;BIT100081 TSU100084&#x27;)ls[&#x27;100081&#x27;, &#x27;1000084&#x27;] re.split()re.split(pattern, string, maxsplit = 0, flags =0)将一个字符串按照正则表达式匹配结果进行分割，返回列表类型。 maxsplit： 最大分割数，剩余部分作为最后一个元素输出。 123456import rere.split(r&#x27;[1-9]\\d&#123;5&#125;&#x27;, &#x27;BIT100081 TSU100084&#x27;)[&#x27;BIT&#x27;, &#x27; TSU&#x27;, &#x27;&#x27;]re.split(r&#x27;[1-9]\\d&#123;5&#125;&#x27;, &#x27;BIT100081 TSU100084&#x27;, maxsplit=1)[&#x27;BIT&#x27;, &#x27;TSU100084&#x27;] re.finditer()re.finditer(pattern, string, flags = 0)搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是match对象。 1234567import refor m in re.finditer(r&#x27;[1-9]\\d&#123;5&#125;&#x27;, &#x27;BIT100081 TSU100084&#x27;): if m: print(m.group(0))100081100084 re.sub()re.sub(pattern, repl, string, count=0, flags = 0)在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串。 repl：替换匹配字符串的字符串 count：匹配的最大替换次数 1234import rere.sub(r&#x27;[1-9]\\d&#123;5&#125;&#x27;, &#x27;:zipcode&#x27;, &#x27;BIT100081 TSU100084&#x27;)&#x27;BIT:zipcode TSU:zipcode&#x27; Re库的另一种等价用法 函数式用法：一次性操作1rst = re.search(r&#x27;[1-9]\\d&#123;5&#125;&#x27;, &#x27;BIT 100081&#x27;) 面向对象用法：编译后的多次操作12pat = re.compile(r&#x27;[1-9]\\d&#123;5&#125;&#x27;)rst = pat.search(&#x27;BIT 100081&#x27;) regex = re.compile(pattern, flags = 0)将正则表达式的字符串形式编译成正则表达式对象 Re库的Match对象12345678910import rematch = re.search(r&#x27;[1-9]\\d&#123;5&#125;&#x27;, &#x27;BIT100084&#x27;)if match: print(match.group(0))100081type(match)&lt;class &#x27;_sre.SRE_Match&#x27;&gt; Match对象的属性 属性 说明 .string 待匹配的文本 .re 匹配时使用的pattern对象（正则表达式） .pos 正则表达式搜索文本的开始位置 .endpos 正则表达式搜索文本的结束位置 Match对象的方法 方法 说明 .group(0) 获取匹配后的字符串 .start() 匹配字符串再原始字符串的开始位置 .end() 匹配字符串再原始字符串的结束位置 .span() 返回(.start()..end()) 12345678910111213141516171819202122import rem = re.search(r&#x27;[1-9]\\d&#123;5&#125;&#x27;, &#x27;BIT100081 TSU100084&#x27;)m.string&#x27;BIT100081 TSU100084&#x27;m.rere.compile(&#x27;[1-9]\\\\d&#123;5&#125;&#x27;)m.pos0m.endpos19m.group(0)&#x27;100081&#x27;m.start()3m.span()(3, 9) Re库的贪婪匹配和最小匹配 实例123import rematch = re.search(r&#x27;PY.*N&#x27;, &#x27;PYANBNCNDN&#x27;)match.group(0) 贪婪匹配Re库默认采用贪婪匹配，即输出匹配最长的子串12match.group(0)&#x27;PYANBNCNDN&#x27; 最小匹配如何输出最短的字串加入?123match = re.search(r&#x27;PY.*?N&#x27;, &#x27;PYANBNCNDN&#x27;)match.group(0)&#x27;PYAN&#x27; 最小匹配操作符 操作符 说明 *? 前一个字符0次或无限次扩展，最小匹配 +? 前一个字符1次或无限次扩展，最小匹配 ?? 前一个字符0次或1次扩展，最小匹配 &#123;m,n&#125;? 扩展前一个字符m至n次（含n），最小匹配 Re库（正则表达式）入门正则表达式是用来简洁表达一组字符串的表达式 r&#39;\\d&#123;3&#125;-\\d&#123;8&#125;|\\d&#123;4&#125;-\\d&#123;7&#125;&#39;","categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://royccg.github.io/tags/python/"},{"name":"正则","slug":"正则","permalink":"https://royccg.github.io/tags/%E6%AD%A3%E5%88%99/"}],"keywords":[]},{"title":"在Centos上使用魔改rclone挂载世纪互联Onedrive网盘","slug":"在Centos上使用魔改rclone挂载世纪互联Onedrive网盘","date":"2020-05-31T10:37:05.000Z","updated":"2022-08-19T07:44:09.331Z","comments":true,"path":"2020/05/31/在Centos上使用魔改rclone挂载世纪互联Onedrive网盘/","link":"","permalink":"https://royccg.github.io/2020/05/31/%E5%9C%A8Centos%E4%B8%8A%E4%BD%BF%E7%94%A8%E9%AD%94%E6%94%B9rclone%E6%8C%82%E8%BD%BD%E4%B8%96%E7%BA%AA%E4%BA%92%E8%81%94Onedrive%E7%BD%91%E7%9B%98/","excerpt":"说明官方版本Rclone不支持挂载世纪互联版本的onedrive，大佬们修改并编译了支持世纪互联版本的Rclone，同时支持其他版本的储存方式。 本教程使用 魔改的Rclone 挂载世纪互联版本的Onedrive网盘。 魔改版的rclone下载地址 Rclone V1.50.2版： window-64版 window-32位 linux-64位 linux-32位 Rclone V1.51.0版： window-64位 linux-64位","text":"说明官方版本Rclone不支持挂载世纪互联版本的onedrive，大佬们修改并编译了支持世纪互联版本的Rclone，同时支持其他版本的储存方式。 本教程使用 魔改的Rclone 挂载世纪互联版本的Onedrive网盘。 魔改版的rclone下载地址 Rclone V1.50.2版： window-64版 window-32位 linux-64位 linux-32位 Rclone V1.51.0版： window-64位 linux-64位 注册Azure应用地址：https://portal.azure.cn/，登录完成后按下列步骤进行： 左侧找到 Azure Active Directory点击 左侧找到 应用注册 上方找到 新注册点击 名字：onedrive（自取） 受支持的账户类型：任何组织目录(任何 Azure AD 目录 - 多租户)中的帐户（第二个) 重定向URL: http://localhost:53682 点击注册 找到应用程序（客户端）ID 复制Client_ID并保存 左下方找到证书和密码点击 下方 客户端密码 - 新客户端密码 说明： onedrive 截止期限：默认 1年内 点击 添加，值 客户端密码 复制client_secret保存 左侧找到 API 权限 点击 添加权限 - Microsoft Graph - 委托的权限 - Files (7)全部勾选 选择应用程序权限 在下方Files里选择 Files.Read.All和Files.ReadWrite.All 回到界面如果会发现该权限处于未授权状态，我们需要全局管理员点击 代表XXXX授予管理员同意1234567Files.ReadFiles.Read.AllFiles.Read.SelectedFiles.ReadWriteFiles.ReadWrite.AllFiles.ReadWrite.AppFolderFiles.ReadWrite.Selected 申请access_token由于vps上没有浏览器的客户端，不能申请access_token，所以需要借助window平台。 下载完window相应的客户端文件，在Rclone所在的文件夹内，打开CMD，执行命令(替换相应的ID和Secret):1rclone authorize onedrive &quot;应用程序(客户端) ID&quot; &quot;客户端密码值&quot; --onedrive-is-21vianet-version=true 之后会跳转到浏览器，登录账号之后返回 Windows 命令行，会返回 token，复制保存下来，后面要用。 安装配置VPS端的Rclone下载相应的版本，并上传解压到/url/bin目录，然后 12chmod +x /usr/bin/rclonerclone config 就进入了和官方版 rclone 一样的挂载程序，和国际版 onedrive 不同的是：12client_id填写应用程序(客户端) ID，client_secret填写客户端密码。is_21vianet_version填true，Edit advanced config 以及 Use auto config 都选 no，下一步粘贴上之前在 Windows 获取的 token(&#123;&quot;access_token&quot;:&quot;...&quot;,&quot;expriry&quot;:&quot;...&quot;&#125;)，继续按提示完成之后的步骤。 挂载挂载为磁盘123456#安装 fuseyum install fuse#创建挂载目录,目录叫什么都可以mkdir /root/OneDrive#挂载为磁盘，下面的DriveName、Folder、LocalFolder参数根据说明自行替换rclone mount DriveName:Folder LocalFolder --copy-links --no-gzip-encoding --no-check-certificate --allow-other --allow-non-empty --umask 000 DriveName为初始化配置填的name，Folder为OneDrive里的文件夹，LocalFolder为VPS上的本地文件夹。 如果挂载过程中出现NOTICE: One drive root &#39;test&#39;: poll-interval is not supported by this remote错误，可以无视该错误。 挂载成功后，输入df -h命令查看即可！ 卸载磁盘1fusermount -qzu LocalFolder 开机自启（一种方式）使用Systemctl守护进程，也只适用于CentOS 7、Debian 8+、Ubuntu 16+。 123#将后面修改成你上面手动运行命令中，除了rclone的全部参数command=&quot;mount DriveName:Folder LocalFolder --copy-links --no-gzip-encoding --no-check-certificate --allow-other --allow-non-empty --umask 000&quot; 12345678910111213141516171819202122232425#以下是一整条命令，先修改DriveName:Folder和LocalFolder的值，再一起复制到SSH客户端运行cat &gt; /etc/systemd/system/rclone.service &lt;&lt;EOF[Unit]Description=RcloneAssertPathIsDirectory=LocalFolderAfter=network-online.target[Service]Type=simpleExecStart=/usr/bin/rclone mount DriveName:Folder LocalFolder \\ --umask 0000 \\ --default-permissions \\ --allow-non-empty \\ --allow-other \\ --buffer-size 32M \\ --dir-cache-time 12h \\ --vfs-read-chunk-size 64M \\ --vfs-read-chunk-size-limit 1GExecStop=/bin/fusermount -u LocalFolderRestart=on-abortUser=root[Install]WantedBy=default.targetEOF 开始启动： 1systemctl start rclone 设置开机自启：1systemctl enable rclone其他命令：123重启：systemctl restart rclone停止：systemctl stop rclone状态：systemctl status rclone 如果你想挂载多个网盘，那么将systemd配置文件的rclone.service改成rclone1.service即可，重启动什么的同样换成rclone1。 其他玩法在拥有国内较好的速度的世纪互联的Onedrive，还有其他的玩法，结合Aria2还有Telegram等，后面会慢慢补充。","categories":[],"tags":[{"name":"vps","slug":"vps","permalink":"https://royccg.github.io/tags/vps/"},{"name":"onedrive","slug":"onedrive","permalink":"https://royccg.github.io/tags/onedrive/"},{"name":"在线网盘","slug":"在线网盘","permalink":"https://royccg.github.io/tags/%E5%9C%A8%E7%BA%BF%E7%BD%91%E7%9B%98/"}],"keywords":[]},{"title":"大悬臂盖梁施工工艺调研","slug":"大悬臂盖梁施工工艺调研","date":"2020-03-16T03:09:19.000Z","updated":"2022-08-19T07:44:09.331Z","comments":true,"path":"2020/03/16/大悬臂盖梁施工工艺调研/","link":"","permalink":"https://royccg.github.io/2020/03/16/%E5%A4%A7%E6%82%AC%E8%87%82%E7%9B%96%E6%A2%81%E6%96%BD%E5%B7%A5%E5%B7%A5%E8%89%BA%E8%B0%83%E7%A0%94/","excerpt":"《上海S7公路盖梁预制拼装施工工艺》 —查义强 上部结构高架桥标准段及匝道桥的上部结构，主要采用简支小箱梁结构，标准跨径在30~35m； 下部结构采用预应力混凝土倒T盖梁+独柱墩的形式","text":"《上海S7公路盖梁预制拼装施工工艺》 —查义强 上部结构高架桥标准段及匝道桥的上部结构，主要采用简支小箱梁结构，标准跨径在30~35m； 下部结构采用预应力混凝土倒T盖梁+独柱墩的形式 标准盖梁预制 采用了高挡块和深埋锚构造； 盖梁端部挡块高1.3m：遮挡小箱梁和脊骨梁之间的缝隙；防止带防撞墙预制的边梁倾覆。 标准盖梁构造： 盖梁模块体系 盖梁采用预制端板，提前水平预制端部挡板； 浇筑完成达到龄期后起吊； 插入盖梁钢筋模块并焊接； 深埋锚在挡块浇筑时同步预埋； 混凝土浇筑及养护 采用高性能混凝土： 粗骨料选用精品石子（粒径不大于2cm）； 针片状含量不大于6%，使用聚羧酸减水剂； 水灰比控制在0.028以内，扩展度不低于650mm； C60高性能混凝土的供应由预制场内自建拌站提供。 盖梁浇筑采用大型料斗喂料： 盖梁一端（启始端）$\\rightarrow$另外一端（结束端）：连续浇筑 达到盖梁底部的预制浇筑限位后，返回起始端逐步浇筑两侧挡块 盖梁底部浇筑到位后进行一次收水； 在混凝土初凝前对脊骨梁后浇带充分拉毛，确保二次浇筑质量。 构件养护采用水管直接喷淋养护。 盖梁吊装和运输 标准盖梁自重约为160t，采用两台160t行车抬吊; 钢丝绳采用四根8m长双头钢丝绳，直径52mm； 起重量35t，卸扣采用4个85t级，盖梁通过经专门设计的扁担起吊。 盖梁现场拼装 盖梁姿态测量与调节 预制构件的测量就位是预制拼装施工控制的重点把控内容，预制盖梁的精准就位是保证设计道路线形的前提。 对于标准预制盖梁，沿道路前进方向和垂直道路前进方向的轴向测量是核心控制指标。 盖梁姿态就位时，放置在盖梁横向中线和端部中轴线的荧光标志位置应符合设计参数，盖梁顶部标高河横向坡度作为辅助测量指标。 盖梁端部中轴线直接影响上部小箱梁的制作梁长，是最为关键的测量值。 垫层坐浆 立柱与盖梁之间坐浆之前： 安放调节垫块（200mm $\\times$ 200mm $\\times$ 21mm橡胶制作，地下可设置薄钢板）保证垫层厚度 调整盖梁安装标高 立柱顶面应进行清洁： 采用高压水枪进行清尘及湿润 采用高压气管将多余水清除，确保立柱顶面不留水迹 在立柱顶安装挡浆模块 浇筑垫层砂浆：强度应大于盖梁混凝土标号一个等级以上过。 新型波纹管灌浆 波纹管灌浆砂浆的性能和灌浆密实度是预制拼装结构的根本保障，灌浆工艺控制也是整个预制拼装施工工艺质量控制的重中之重。 项目部根据预制拼装的工艺特点，配备了专业化的施工设备，并将整合成一体化作业平台。 灌浆波纹管内砂浆采用C100高强无收缩水泥灌浆料。 压浆过程为浆料从下部注砂浆孔压浆，上部出浆口出气； 待浓浆流出，封堵出浆口并停止压浆； 待压浆管压力稳定拔出压浆枪口封堵注浆口","categories":[],"tags":[{"name":"论文","slug":"论文","permalink":"https://royccg.github.io/tags/%E8%AE%BA%E6%96%87/"},{"name":"施工","slug":"施工","permalink":"https://royccg.github.io/tags/%E6%96%BD%E5%B7%A5/"},{"name":"盖梁","slug":"盖梁","permalink":"https://royccg.github.io/tags/%E7%9B%96%E6%A2%81/"},{"name":"拼装施工","slug":"拼装施工","permalink":"https://royccg.github.io/tags/%E6%8B%BC%E8%A3%85%E6%96%BD%E5%B7%A5/"}],"keywords":[]},{"title":"新员工培训-桥梁","slug":"新员工培训-桥梁","date":"2019-11-19T05:54:53.000Z","updated":"2022-08-19T07:44:09.420Z","comments":true,"path":"2019/11/19/新员工培训-桥梁/","link":"","permalink":"https://royccg.github.io/2019/11/19/%E6%96%B0%E5%91%98%E5%B7%A5%E5%9F%B9%E8%AE%AD-%E6%A1%A5%E6%A2%81/","excerpt":"","text":"设计程序及设计依据、工作方法&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;一般项目的工作程序分为： 预可行性程序（代项目建议书）$\\Rightarrow$ 中小桥梁设计&ensp;&ensp;&ensp;&ensp;&ensp;&ensp; 独立桥梁设计高架桥梁设计","categories":[],"tags":[{"name":"桥梁设计","slug":"桥梁设计","permalink":"https://royccg.github.io/tags/%E6%A1%A5%E6%A2%81%E8%AE%BE%E8%AE%A1/"},{"name":"中小桥梁","slug":"中小桥梁","permalink":"https://royccg.github.io/tags/%E4%B8%AD%E5%B0%8F%E6%A1%A5%E6%A2%81/"},{"name":"独立桥梁","slug":"独立桥梁","permalink":"https://royccg.github.io/tags/%E7%8B%AC%E7%AB%8B%E6%A1%A5%E6%A2%81/"},{"name":"高架桥梁","slug":"高架桥梁","permalink":"https://royccg.github.io/tags/%E9%AB%98%E6%9E%B6%E6%A1%A5%E6%A2%81/"}],"keywords":[]},{"title":"hexo--blog迁移","slug":"hexo-blog迁移","date":"2019-10-20T12:30:27.000Z","updated":"2022-08-19T07:44:09.304Z","comments":true,"path":"2019/10/20/hexo-blog迁移/","link":"","permalink":"https://royccg.github.io/2019/10/20/hexo-blog%E8%BF%81%E7%A7%BB/","excerpt":"","text":"待补充","categories":[],"tags":[{"name":"建站","slug":"建站","permalink":"https://royccg.github.io/tags/%E5%BB%BA%E7%AB%99/"},{"name":"hexo","slug":"hexo","permalink":"https://royccg.github.io/tags/hexo/"}],"keywords":[]},{"title":"【电影】【国漫】哪吒之魔童降世","slug":"【电影】【国漫】哪吒之魔童降世","date":"2019-10-20T11:28:50.000Z","updated":"2022-08-19T07:44:09.319Z","comments":true,"path":"2019/10/20/【电影】【国漫】哪吒之魔童降世/","link":"","permalink":"https://royccg.github.io/2019/10/20/%E3%80%90%E7%94%B5%E5%BD%B1%E3%80%91%E3%80%90%E5%9B%BD%E6%BC%AB%E3%80%91%E5%93%AA%E5%90%92%E4%B9%8B%E9%AD%94%E7%AB%A5%E9%99%8D%E4%B8%96/","excerpt":"感慨&ensp;&ensp;&ensp;&ensp;&ensp;国漫自2015年的《大圣归来》之后，确实渐渐有了崛起之势，也不枉费国家每年这么多补贴进去。不过，这是一个大蛋糕，成年人的动漫市场，长期被欧美、日本等较为成熟的生产地霸占，确实对这一代人的软文化有很大的影响。在此，也希望国家的动漫产业能越来越成熟，越来越蓬勃。（虽然，给盗版地址，似乎不是非常政治正确，手动狗头！）顺便也期待年初一的新剧—姜子牙传奇！","text":"感慨&ensp;&ensp;&ensp;&ensp;&ensp;国漫自2015年的《大圣归来》之后，确实渐渐有了崛起之势，也不枉费国家每年这么多补贴进去。不过，这是一个大蛋糕，成年人的动漫市场，长期被欧美、日本等较为成熟的生产地霸占，确实对这一代人的软文化有很大的影响。在此，也希望国家的动漫产业能越来越成熟，越来越蓬勃。（虽然，给盗版地址，似乎不是非常政治正确，手动狗头！）顺便也期待年初一的新剧—姜子牙传奇！ 剧照&ensp;&ensp;&ensp;&ensp;&ensp;这里也附上几张觉得不错的剧照。 剧信息◎译 名 Ne Zha/Nezha: Birth of the Demon Child/哪吒降世◎片 名 哪吒之魔童降世◎年 代 2019◎产 地 中国大陆◎类 别 剧情 / 喜剧 / 动画 / 奇幻◎语 言 汉语普通话◎上映日期 2019-07-13(大规模点映) / 2019-07-26(中国大陆)◎IMDb评分 7.8/10 from 1731 users◎IMDb链接 https://www.imdb.com/title/tt10627720/◎豆瓣评分 8.6/10 from 973,299 users◎豆瓣链接 https://movie.douban.com/subject/26794435/◎片 长 110分钟◎导 演 饺子 Yu Yang◎编 剧 饺子 Yu Yang / 易巧 Qiao Yi / 魏芸芸 Yunyun Wei◎主 演 吕艳婷 Yanting Lü 囧森瑟夫 Joseph 瀚墨 Mo Han 陈浩 Hao Chen 绿绮 Qi Lü 张珈铭 Jiaming Zhang 杨卫 Wei Yang ◎标 签 哪吒 | 动画 | 中国大陆 | 神话 | 成长 | 2019 | 亲情 | 搞笑 ◎简 介 天地灵气孕育出一颗能量巨大的混元珠，元始天尊将混元珠提炼成灵珠和魔丸，灵珠投胎为人，助周伐纣时可堪大用；而魔丸则会诞出魔王，为祸人间。元始天尊启动了天劫咒语，3年后天雷将会降临，摧毁魔丸。太乙受命将灵珠托生于陈塘关李靖家的儿子哪吒身上。然而阴差阳错，灵珠和魔丸竟然被掉包。本应是灵珠英雄的哪吒却成了混世大魔王。调皮捣蛋顽劣不堪的哪吒却徒有一颗做英雄的心。然而面对众人对魔丸的误解和即将来临的天雷的降临，哪吒是否命中注定会立地成魔？他将何去何从？ 引用GeneralComplete name : 哪吒之魔童降世.Nezha Birth of the Demon Child.2019.4K.WEB-DL.HEVC.AAC-99TV.mp4Format : MPEG-4Format profile : Base MediaCodec ID : isom (isom/iso2/mp41)File size : 2.85 GiBDuration : 1 h 49 minOverall bit rate mode : VariableOverall bit rate : 3 704 kb/sWriting application : Lavf58.27.103 VideoID : 1Format : HEVCFormat/Info : High Efficiency Video CodingFormat profile : Main@L5@MainCodec ID : hev1Codec ID/Info : High Efficiency Video CodingDuration : 1 h 49 minBit rate : 3 508 kb/sWidth : 3 840 pixelsHeight : 1 608 pixelsDisplay aspect ratio : 2.40:1Original display aspect ratio : 2.40:1Frame rate mode : ConstantFrame rate : 25.000 FPSColor space : YUVChroma subsampling : 4:2:0Bit depth : 8 bitsBits/(Pixel*Frame) : 0.023Stream size : 2.69 GiB (95%)Codec configuration box : hvcC AudioID : 2Format : AAC LCFormat/Info : Advanced Audio Codec Low ComplexityCodec ID : mp4a-40-2Duration : 1 h 49 minBit rate mode : VariableBit rate : 192 kb/sChannel(s) : 2 channelsChannel layout : L RSampling rate : 44.1 kHzFrame rate : 43.066 FPS (1024 SPF)Compression mode : LossyStream size : 149 MiB (5%)Default : YesAlternate group : 1 下载var dplayer0 = new DPlayer({\"element\":document.getElementById(\"dplayer0\"),\"autoplay\":0,\"theme\":\"#FADFA3\",\"loop\":1,\"video\":{\"url\":\"https://alphaone-my.sharepoint.cn/personal/royonedrive_vip_tg/_layouts/15/download.aspx?UniqueId\",\"pic\":\"https://img9.doubanio.com/view/photo/l/public/p2563001765.webp\"}}); --> 下载地址","categories":[],"tags":[{"name":"电影","slug":"电影","permalink":"https://royccg.github.io/tags/%E7%94%B5%E5%BD%B1/"},{"name":"国漫","slug":"国漫","permalink":"https://royccg.github.io/tags/%E5%9B%BD%E6%BC%AB/"}],"keywords":[]},{"title":"工作伊始","slug":"工作伊始","date":"2019-09-03T05:11:03.000Z","updated":"2022-08-19T07:44:09.378Z","comments":true,"path":"2019/09/03/工作伊始/","link":"","permalink":"https://royccg.github.io/2019/09/03/%E5%B7%A5%E4%BD%9C%E4%BC%8A%E5%A7%8B/","excerpt":"","text":"本来准备一个工作专门的blog，但是两个blog很难管理，而且内容也都不充实，所以现在也在这个blog中更新自己工作的内容，希望能和blog一起成长。","categories":[],"tags":[{"name":"工作","slug":"工作","permalink":"https://royccg.github.io/tags/%E5%B7%A5%E4%BD%9C/"},{"name":"总结","slug":"总结","permalink":"https://royccg.github.io/tags/%E6%80%BB%E7%BB%93/"}],"keywords":[]},{"title":"桥墩盖梁计算(一)","slug":"桥墩盖梁计算(一)","date":"2019-09-03T04:59:06.000Z","updated":"2022-08-19T07:44:09.436Z","comments":true,"path":"2019/09/03/桥墩盖梁计算(一)/","link":"","permalink":"https://royccg.github.io/2019/09/03/%E6%A1%A5%E5%A2%A9%E7%9B%96%E6%A2%81%E8%AE%A1%E7%AE%97(%E4%B8%80)/","excerpt":"按规范JTJ023—85第3.4.2条，对于双柱式墩台，当盖梁的刚度与柱的刚度比大于5时，盖梁可按简支梁计算。盖梁按简支梁计算，较易进行，本篇中不做示例。桥台盖梁如 按钢构计算，由于桥台肋身系与基础固结，可以直接采用桥梁结构综合程序计算。桥墩刚构由于基础是桩基，现采用集成刚度法计算示例。","text":"按规范JTJ023—85第3.4.2条，对于双柱式墩台，当盖梁的刚度与柱的刚度比大于5时，盖梁可按简支梁计算。盖梁按简支梁计算，较易进行，本篇中不做示例。桥台盖梁如 按钢构计算，由于桥台肋身系与基础固结，可以直接采用桥梁结构综合程序计算。桥墩刚构由于基础是桩基，现采用集成刚度法计算示例。 桥墩盖梁的荷载1.恒载&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;设定主梁及上部的恒载为1010.616kN，盖梁的自重为72.208kN/m。 2.活载&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;上部结构设定为主梁桥面板，设定为简支板，汽车-超20级轮重力自简支板传至主梁，再由主梁传至盖梁。盖梁&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;设定跨中最大弯矩的梁压力（活载布置A）：P1=P1’= 22.104kN，P2=P2’=412.606kN，P3 =486.285kN。&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;支点（柱顶）最小负弯矩的梁压力（活载布置B）:P1 = 419.974kN，P2 = 482.601kN,P3 = 412.606kN，P2’=40.524kN，P1’=0。 盖梁、柱、桩的几何尺寸及有关系数&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;盖梁、柱、桩的几何尺寸如下图所示，作为示例，假定桩顶出土2m。 盖梁尺寸：$1.2m（高）\\times 2.4m（宽）\\times 10.5m(长)$ 墩柱直径：$1.5m$ 基桩直径：$1.8m$ 桩如土：$28m$ 盖梁、墩柱、基桩均为25号混凝土，弹性模量为$2.85 \\times 10^7 kN/m^2$ 。参考《铁路桥涵设计规范》中规定，弹性模量乘以0.8，盖梁弹性模量与惯性矩乘积的$0.8$ 倍为：0.8 \\times E_{ab} I_{ab} = 0.8 \\times 2.85\\times 10^7\\times \\frac{1}{12}\\times 2.4\\times 1.2^3 =7880\\times 10^3 kN.m $ab、be$ 柱弹性模量与惯性乘积的$0.8$ 倍为：$0.8\\times2.85\\times 10^7\\times 0.04909\\times1.5^4=5\\,666\\times 10^3kN.m^2$ $d、e$ 桩弹性模量与惯性矩乘积的$0.8$ 倍为： $0.8\\times2.85\\times 10^7\\times 0.04909\\times1.8^4=11\\,759\\times 10^3kN.m^2$ 桩基变形系数 $\\alpha =0.366 \\quad 1/m$ $\\alpha h=0.336\\times 28 =9.408&gt;4$，以4计。 盖梁、柱、桩的弹性常数&ensp;&ensp;&ensp;&ensp;&ensp;&ensp;盖梁、桩的弹性尝试按《换算刚度法及其在结构中的应用》第一章计算。 $ab、ba$ 梁抗弯刚度:S_{ab} =S_{ba} =4 {\\it{EI}}/l =4\\times 0.8\\times E_{ab}I_{ab}/l_{ab}=4\\times 7\\,880\\times 10^3/6.1 =5\\,167.2\\times 10^3 kN/弧度 $ab、ba$梁相干系数： T_{ab}=T_{ba} =6EI/l_{ab}^2 = 6\\times 0.8\\times E_{ab}I_{ab}/l_{ab}^2 =6\\times 7\\,880\\times 10^3/6.1^2 = 1\\,270.63\\times 10^3 kN/m 或kN/弧度 墩柱抗推刚度： K_{ad} = K_{da} =K_{be} = K_{eb} =12EI/l^3=12\\times 0.8\\times E_{ad}I_{ad}/l_{ad}^3 = 12\\times 5\\,666\\times 10^3/8^3 =132.80\\times10^3 kN/m 墩柱的抗弯刚度:S_{ad} = S_{da}=S_{be} = S_{eb} = 4EI/l = 4\\times 0.8 \\times E_{ad}I_{ad}/l_{ad} = 4\\times 5\\,666\\times 10^3/8 = 2833.0\\times 10^3 kN.m/弧度 墩柱的传递抗弯刚度： CS_{ad} =CS_{da} =CS_{be} =CS_{eb} = 0.5\\times 2\\,833.0\\times 10^3 =1\\,416.5\\times 10^310^3 kN.m/弧度 墩柱的相干系数： T_{ad} =T_{da} =T_{be} = T_{eb} = 6EI/l^2 =6E_{ad}\\times I_{ad}/l_{ad}^2 = 6\\times 5\\,666\\times 10^3/e^2 = 531.19\\times 10^3 kN.m/m 或kN/弧度 两桩尺寸及地基土相同，桩顶自由长度$l_0=2m$，$\\alpha l_0=0.336\\times =0.672$。桩顶的弹性常数，即抗推刚度$\\rho_2$、相干系数$\\rho_3$、抗弯刚度$\\rho_4$，可由《基础工程》中查表得 ，此处列出作参考。 \\rho_2 = \\alpha^3\\times 0.8E_{d}I_{d}x_{Q} =0.336^3\\times 11\\,749\\times 10^3\\times 0.577644 = 257.44kN/m \\rho_3 = \\alpha^2\\times 0.8E_{d}I_{d}x_{m} =0.336^2 \\times 11\\,749\\times 10^3\\times 0.7186424 = 953.22kN.m/m 或kN/弧度 \\rho_3 = \\alpha\\times 0.8E_{d}I_{d}\\phi_{m} =0.336 \\times 11\\,749\\times 10^3\\times 1.3036612 = 5\\,166.2kN/m","categories":[],"tags":[{"name":"桥梁设计","slug":"桥梁设计","permalink":"https://royccg.github.io/tags/%E6%A1%A5%E6%A2%81%E8%AE%BE%E8%AE%A1/"},{"name":"盖梁计算","slug":"盖梁计算","permalink":"https://royccg.github.io/tags/%E7%9B%96%E6%A2%81%E8%AE%A1%E7%AE%97/"}],"keywords":[]},{"title":"一款二次元的Web多人在线网络聊天系统：Fiora安装及使用","slug":"一款二次元的Web多人在线网络聊天系统：Fiora安装及使用","date":"2019-07-21T12:11:51.000Z","updated":"2022-08-19T07:44:09.325Z","comments":true,"path":"2019/07/21/一款二次元的Web多人在线网络聊天系统：Fiora安装及使用/","link":"","permalink":"https://royccg.github.io/2019/07/21/%E4%B8%80%E6%AC%BE%E4%BA%8C%E6%AC%A1%E5%85%83%E7%9A%84Web%E5%A4%9A%E4%BA%BA%E5%9C%A8%E7%BA%BF%E7%BD%91%E7%BB%9C%E8%81%8A%E5%A4%A9%E7%B3%BB%E7%BB%9F%EF%BC%9AFiora%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/","excerpt":"程序展示","text":"程序展示 功能 好友，群组，私聊，群聊 文本，图片，代码，url等多种类型消息 贴吧表情，滑稽表情，搜索表情包 桌面通知，声音提醒，语音播报 自定义桌面背景，主题颜色，文本颜色 查看在线用户，@功能 小黑屋禁言 手动安装 Github地址：https://github.com/yinxin630/fiora 所需环境：Nodejs &gt;= 8.9.0、Mongodb。 说明：512M内存vps可能还需要先加一点虚拟内存，不然构建过程会失败，可以使用Swap一键脚本→传送门。 1、安装Nodejs 1234567#Debian/Ubuntu系统curl -sL https://deb.nodesource.com/setup_10.x | bash -apt install -y git nodejs #CentOS系统curl -sL https://rpm.nodesource.com/setup_10.x | bash -yum install nodejs git -y 2、安装Mongodb 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#CentOS 6系统，将下面命令一起复制进SSH客户端运行cat &lt;&lt;EOF &gt; /etc/yum.repos.d/mongodb.repo[mongodb-org-4.0]name=MongoDB Repositorybaseurl=https://repo.mongodb.org/yum/redhat/6/mongodb-org/4.0/x86_64/gpgcheck=1enabled=1gpgkey=https://www.mongodb.org/static/pgp/server-4.0.ascEOFyum -y install mongodb-org#CentOS 7系统，将下面命令一起复制进SSH客户端运行cat &lt;&lt;EOF &gt; /etc/yum.repos.d/mongodb.repo[mongodb-org-4.0]name=MongoDB Repositorybaseurl=https://repo.mongodb.org/yum/redhat/7/mongodb-org/4.0/x86_64/gpgcheck=1enabled=1gpgkey=https://www.mongodb.org/static/pgp/server-4.0.ascEOFyum -y install mongodb-org#Debian 8系统apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4echo &quot;deb http://repo.mongodb.org/apt/debian jessie/mongodb-org/4.0 main&quot; | tee /etc/apt/sources.list.d/mongodb-org-4.0.listapt update -yapt install -y mongodb-org#Debian 9系统curl https://www.mongodb.org/static/pgp/server-4.0.asc | apt-key add -echo &quot;deb http://repo.mongodb.org/apt/debian stretch/mongodb-org/4.0 main&quot; | tee /etc/apt/sources.list.d/mongodb-org-4.0.listapt-get update -yapt-get install -y mongodb-org#Debian 10系统，目前Debian 10还没Mongodb软件包，不过试了下还是可以用下面的方法勉强安装的apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4echo &quot;deb https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.0 multiverse&quot; | tee /etc/apt/sources.list.d/mongodb-org-4.0.listapt update -yapt install -y mongodb-org#Ubuntu 16.04系统apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4echo &quot;deb https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/4.0 multiverse&quot; | tee /etc/apt/sources.list.d/mongodb-org-4.0.listapt update -yapt install -y mongodb-org#Ubuntu 18.04、18.10、19.04系统apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 9DA31620334BD75D9DCB49F368818C72E52529D4echo &quot;deb https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.0 multiverse&quot; | tee /etc/apt/sources.list.d/mongodb-org-4.0.listapt update -yapt install -y mongodb-org 如果导入公匙时出现gnupg, gnupg2 and gnupg1 do not seem to be installed错误，使用apt install -y gnupg2，然后重新导入即可。 启动Mongodb并设置开机自启： 1234567#CentOS 6系统service mongod startchkconfig mongod on#CentOS 7、Debian、Ubuntu系统systemctl start mongodsystemctl enable mongod 3、安装fiora 1234567891011#拉取源码并存放于/opt文件夹git clone https://github.com/yinxin630/fiora.git -b master /opt/fioracd /opt/fiora#安装依赖npm i#构建npm run buildmv -f dist/fiora/* public#启动export NODE_ENV=productionnode server/main.js 运行后打开ip:9200，注册一个账号，然后可以看SSH客户端运行日志，获取自己的userId。 12#这里注册或登录的时候返回的信息，后面的5d329dd354b9则为自己的userId&lt;-- getLinkmansLastMessages mYNheu93jds7 5d329dd354b9 如果ip:9200打不开的，可以检查下防火墙，CentOS系统可以使用以下命令： 12345678#CentOS 6iptables -I INPUT -p tcp --dport 9200 -j ACCEPTservice iptables saveservice iptables restart#CentOS 7firewall-cmd --zone=public --add-port=9200/tcp --permanentfirewall-cmd --reload 像阿里云等，还需要额外在安全组开放端口。 接下来再将自己的账号设置成管理员，先使用Ctrl+C断开运行。 新建Systemd配置文件，只适用于CentOS 7、Debian 8+、Ubuntu 16+等。 1234567891011121314151617181920212223242526#先修改你的userId和运行端口后复制到SSH运行Administrator=5d329dd354b9Port=9200#新建fiora用户并授权useradd -M fiora &amp;&amp; usermod -L fiorachown -R fiora:fiora /opt/fiora#新建systemd配置文件，将以下代码一起复制到SSH运行cat &gt; /etc/systemd/system/fiora.service &lt;&lt;EOF[Unit]Description=fioraAfter=network.targetWants=network.target[Service]Type=simplePIDFile=/var/run/fiora.pidExecStart=$(command -v node) server/main.jsWorkingDirectory=/opt/fioraEnvironment=NODE_ENV=production Administrator=$Administrator Port=$PortUser=fioraRestart=on-failureRestartSec=42s[Install]WantedBy=multi-user.targetEOF 开始启动并设置开机自启： 12systemctl start fiorasystemctl enable fiora 其它系统，比如CentOS、Debian 7等系统，可以直接使用以下方法启动： 123#管理员userId和运行端口自行修改export NODE_ENV=production Administrator=5d329dd354b9 Port=9200nohup node server/main.js &amp; 此时就可以访问ip:9200，运行端口以你设置的为准，这时候你登陆的时候，会发现左侧多了个管理员图标。 4、域名反代 如果你想使用域名的话，这里依旧使用Caddy反代，操作如下： 安装Caddy： 123wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh#备用地址wget -N --no-check-certificate https://www.moerats.com/usr/shell/Caddy/caddy_install.sh &amp;&amp; chmod +x caddy_install.sh &amp;&amp; bash caddy_install.sh 配置Caddy： 12345678910111213141516171819202122232425262728#以下全部内容是一个整体，请修改域名后一起复制到SSH运行！#http访问，该配置不会自动签发SSLecho &quot;www.moerats.com &#123; gzip proxy / 127.0.0.1:9200 &#123; websocket header_upstream Host &#123;host&#125; header_upstream X-Real-IP &#123;remote&#125; header_upstream X-Forwarded-For &#123;remote&#125; header_upstream X-Forwarded-Port &#123;server_port&#125; header_upstream X-Forwarded-Proto &#123;scheme&#125; &#125;&#125;&quot; &gt; /usr/local/caddy/Caddyfile#https访问，该配置会自动签发SSL，请提前解析域名到VPS服务器echo &quot;www.moerats.com &#123; gzip tls admin@moerats.com proxy / 127.0.0.1:9200 &#123; websocket header_upstream Host &#123;host&#125; header_upstream X-Real-IP &#123;remote&#125; header_upstream X-Forwarded-For &#123;remote&#125; header_upstream X-Forwarded-Port &#123;server_port&#125; header_upstream X-Forwarded-Proto &#123;scheme&#125; &#125;&#125;&quot; &gt; /usr/local/caddy/Caddyfile tls参数会自动帮你签发ssl证书，如果你要使用自己的ssl，改为tls /root/xx.crt /root/xx.key即可。后面为ssl证书路径。 启动Caddy： 1/etc/init.d/caddy start 就可以打开域名进行访问了。 如果你想修改默认的频道名称的话，可以编辑config/server.js文件，修改最下面的代码： 1defaultGroupName: &#x27;fiora&#x27;, 然后重启应用即可。需要使用到七牛云CDN的，可以参考作者给的教程自行设置→传送门 宝塔安装1、安装宝塔 123456#CentOS系统wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh#Ubuntu系统wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh#Debian系统wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; bash install.sh 安装完成后，进入面板，点击左侧软件商店，然后安装PM2管理器、MongoDB、Nginx(使用域名访问才需要安装，反之不用)。 注意：Debian安装MongoDb之前还需要使用命令apt install sudo，不然可能存在MongoDb启动不了的情况；如果你已经安装了MongoDb，那就先使用apt install sudo，再使用/etc/init.d/mongodb start启动即可。 2、安装fiora该步骤参考上面的手动步骤3，区别在于新建systemd配置文件的时候，Environment参数还需要加一样，不然启动可能失败。 只需要把新建systemd配置文件步骤换成下面这个，其它一模一样。 123456789101112131415161718192021#以下命令一起复制进SSH客户端运行npm=$(which npm)cat &gt; /etc/systemd/system/fiora.service &lt;&lt;EOF[Unit]Description=fioraAfter=network.targetWants=network.target[Service]Type=simplePIDFile=/var/run/fiora.pidExecStart=$(command -v node) server/main.jsWorkingDirectory=/opt/fioraEnvironment=NODE_ENV=production Administrator=$Administrator Port=$Port PATH=$&#123;npm%/*&#125;User=fioraRestart=on-failureRestartSec=42s[Install]WantedBy=multi-user.targetEOF 3、域名反代先点击左侧网站，添加站点，然后再点击添加好了的域名名称，这时候就进入了站点配置，点击配置文件，在中间添加以下代码： 1234567891011121314location / &#123; proxy_pass http://127.0.0.1:9200; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;upgrade&quot;; proxy_set_header X-Forward-Proto http; proxy_set_header X-Nginx-Proxy true; proxy_http_version 1.1; proxy_redirect off;&#125; 其它的就自己慢慢摸索吧，博主也没过多使用，有问题可以直接去Github Issues反馈。","categories":[],"tags":[{"name":"主机教程","slug":"主机教程","permalink":"https://royccg.github.io/tags/%E4%B8%BB%E6%9C%BA%E6%95%99%E7%A8%8B/"},{"name":"聊天","slug":"聊天","permalink":"https://royccg.github.io/tags/%E8%81%8A%E5%A4%A9/"}],"keywords":[]},{"title":"雷霆沙赞2019","slug":"雷霆沙赞2019","date":"2019-06-07T04:15:50.000Z","updated":"2022-08-19T07:44:09.564Z","comments":true,"path":"2019/06/07/雷霆沙赞2019/","link":"","permalink":"https://royccg.github.io/2019/06/07/%E9%9B%B7%E9%9C%86%E6%B2%99%E8%B5%9E2019/","excerpt":"影片基本信息 【导演】:大卫·F·桑德伯格【主演】: 扎克瑞·莱维/马克·斯特朗/亚瑟·安其/杰克·迪伦·格雷泽【标签】: 动作/奇幻/冒险【制片地区/国家】:美国【年份】:2019【语言】:英语【上映时间】: 2019-04-05(美国/中国大陆)【片长】: 132【原名】:Shazam!【又名】:沙赞！神力集结(港)/沙赞！(台)/雷霆沙赞/沙赞/神奇上尉/奇迹队长/Billy Batson and the Legend of Shazam!/Franklin【评分】:豆瓣：6.8 ，IMDB：8.5【IMDb链接】: tt0448115【编辑整理】: [下片片网]www.xiepp.com","text":"影片基本信息 【导演】:大卫·F·桑德伯格【主演】: 扎克瑞·莱维/马克·斯特朗/亚瑟·安其/杰克·迪伦·格雷泽【标签】: 动作/奇幻/冒险【制片地区/国家】:美国【年份】:2019【语言】:英语【上映时间】: 2019-04-05(美国/中国大陆)【片长】: 132【原名】:Shazam!【又名】:沙赞！神力集结(港)/沙赞！(台)/雷霆沙赞/沙赞/神奇上尉/奇迹队长/Billy Batson and the Legend of Shazam!/Franklin【评分】:豆瓣：6.8 ，IMDB：8.5【IMDb链接】: tt0448115【编辑整理】: [下片片网]www.xiepp.com 剧情介绍/剧照 在这部雷霆沙赞！动作/奇幻/冒险片中,每个人身体里都潜藏着一位超级英雄，只需要一点魔力便能将其释放。14岁的街头小混混比利·巴特森(亚瑟·安其饰)通过大喊“沙赞”这个词，就可以变身为成年超级英雄沙赞(扎克瑞·莱维饰)，这是一种来自于古老巫师的恩惠。如神一般的肌肉身体里，仍存有一颗孩子心，他开心地与超能力为伴。他能飞吗？他能X光透视吗？他能从手中射出闪电吗？他能不用再考试了吗？沙赞以孩子般轻率又鲁莽的方式，开始测试他的能力极限。但他需要尽快掌握这些力量，以对抗塞迪斯·希瓦纳博士控制的邪恶势力。 We all have a superhero inside us, it just takes a bit of magic to bring it out. In Billy Batson’s case, by shouting out one word - SHAZAM! - this streetwise fourteen-year-old foster kid can turn into the adult superhero Shazam. 正义联盟集结！细数《雷霆沙赞！》中的DC彩蛋！。关于神奇队长你想了解的知识。超级英雄们搞笑起来，再厉害的反派也拦不住。《雷霆沙赞》，集智慧与文体于一身！海王之后，华纳两开花！！。希望你和伊冯娜能带热超市特工。他会成为下一个励志王吗？超级孩子气SHAZAM！。DC爆出超级英雄沙赞，他是被哈莉·奎茵唯一爱过的正派男人。DCEU沙赞的造型，让我忍不住想高歌一首………。沙赞，DC最「沙雕」超级英雄！超人的能力，骚年的心！。 在线观看/资源下载 --> 直连下载 种子文件 观影小结 雷霆沙赞在国内和国外的评分呈两极化。就国内而言，漫威的宇宙体系显得更为成熟，内容也更为丰富；而国外，由于对DC的漫画有着一批更为痴迷的漫迷，所以这部DC的英雄，也有更多的受众。当然，每个地方都有各自的市场和受众，虽然我没有时间进入电影院进行观看，但是我觉得沙赞这个人物的塑造也是成功的，对DC未来的影片也更为期待。","categories":[],"tags":[{"name":"影视","slug":"影视","permalink":"https://royccg.github.io/tags/%E5%BD%B1%E8%A7%86/"},{"name":"动漫","slug":"动漫","permalink":"https://royccg.github.io/tags/%E5%8A%A8%E6%BC%AB/"},{"name":"DC","slug":"DC","permalink":"https://royccg.github.io/tags/DC/"}],"keywords":[]},{"title":"利用Heroku免费空间搭建OLAINDEX","slug":"利用Heroku免费空间搭建OLAINDEX","date":"2019-05-20T14:35:02.000Z","updated":"2022-08-19T07:44:09.330Z","comments":true,"path":"2019/05/20/利用Heroku免费空间搭建OLAINDEX/","link":"","permalink":"https://royccg.github.io/2019/05/20/%E5%88%A9%E7%94%A8Heroku%E5%85%8D%E8%B4%B9%E7%A9%BA%E9%97%B4%E6%90%AD%E5%BB%BAOLAINDEX/","excerpt":"Heroku环境准备 一、什么是Herku？ Heroku 是一个支持多种编程语言的 PaaS(Platform-as-a-Service)。在 2010 年被 Salesforce 收购。Heroku 作为最开始的云平台之一，从 2007 年 6 月起开始开发，当时它仅支持 Ruby，后来增加了对 Java、Node.js、Scala、Clojure、Python 以及 PHP 和 Perl 的支持。 二、为什么选用Heroku？ Heroku 的部署上线流程简单。你只需要将源代码纳入到 Git 版本控制系统中即可，其它额外操作 Heroku 都会帮你自动处理好。 Heroku 提供给开发者的免费套餐非常丰富。其中包括最多 5 个应用的免费创建，自定义域名的支持等。实乃良心商家。唯一的不足就是有时候在国内访问速度会比较慢。 Heroku 产品服务在业内评价特别高。在 Rails 圈子中许多有经验的开发者都会使用 Heroku 来部署上线自己的 Demo 应用，其部署流程和速度都受到了 Rails 社区成员的广大好评。","text":"Heroku环境准备 一、什么是Herku？ Heroku 是一个支持多种编程语言的 PaaS(Platform-as-a-Service)。在 2010 年被 Salesforce 收购。Heroku 作为最开始的云平台之一，从 2007 年 6 月起开始开发，当时它仅支持 Ruby，后来增加了对 Java、Node.js、Scala、Clojure、Python 以及 PHP 和 Perl 的支持。 二、为什么选用Heroku？ Heroku 的部署上线流程简单。你只需要将源代码纳入到 Git 版本控制系统中即可，其它额外操作 Heroku 都会帮你自动处理好。 Heroku 提供给开发者的免费套餐非常丰富。其中包括最多 5 个应用的免费创建，自定义域名的支持等。实乃良心商家。唯一的不足就是有时候在国内访问速度会比较慢。 Heroku 产品服务在业内评价特别高。在 Rails 圈子中许多有经验的开发者都会使用 Heroku 来部署上线自己的 Demo 应用，其部署流程和速度都受到了 Rails 社区成员的广大好评。 Heroku的基本安装及配置 首先我们先注册一个Heroku的账号。注：可能需要搭梯子。注册完成之后使用Heroku Toolbelt来安装Heroku客户端。安装完毕后使用 heroku version来检查当前系统是否已安装好Heroku客户端：1heroku version如果有类似下面的输出，则代表Heroku客户端已成功安装：heroku/7.18.3 win32-x64 node-v10.12.0 安装成功之后，你需要使用以下命令来登陆你的Heroku账号：1heroku login 然后添加SSH密钥：1heroku keys:add 至此，Heroku的基本安装及配置已完成。下面开始尝试将应用部署到Heroku上。 演示站点 https://roypk-olaindex.herokuapp.com/home 部署OLAINDEX 到Heroku上 新建OLAINDEX项目 新建OLAINDEX项目目录并从Composer拉取创建包 12composer create-project wangningkai/olaindex olaindex &quot;dev-master&quot;cd olaindex 初始化Git仓库 123git initgit add .git commit -m &quot;new OLAINDEX project&quot; 创建Procfile 要将应用部署到 Heroku 上，你需要新建一个 Procfile 文件，这个文件的作用是通过正确的配置来告诉 Heroku 应用应当使用什么命令来启动 Web 服务器。 将配置写入 Procfile 文件并将其纳入 Git 版本控制中: 123echo web: vendor/bin/heroku-php-apache2 public/ &gt; Procfilegit add .git commit -m &quot;Procfile for Heroku&quot; 在Heroku上创建一个新应用 我们可以使用heroku create命令在Heroku上创建一个新应用： 1heroku create 命令行会输出类似如下信息： 123Creating xxxx-xxx-1234... done, stack is cedar-14http://xxxx-xxx-1234.herokuapp.com/ | git@heroku.com:xxxx-xxx-1234.gitGit remote heroku added mighty-hamlet-1982 是 Heroku 随机为应用生成的默认名称，每个人生成的名称都不相同。http://xxxx-xxx-1234.herokuapp.com/ 则是应用的线上地址。 如果你对生成的默认名称不满意，你可以使用 heroku rename 来对应用名称进行更改，但要保证更改的名称未被其它人占用。如: 1heroku rename imwnk-olaindex 声明 buildpack Heroku 对多种语言进行了支持，因此在应用部署的时候它会去自动检查应用的代码是用什么语言写的，然后再接着执行一系列针对该语言的操作。Laravel 的应用默认会包含 package.json 文件，但当 Heroku 检查到该文件时，它会认为此应用是用 Node.js 写的，因此我们需要对应用的 buildpack 进行声明，告诉 Heroku 我们的应用是用 PHP 写的。声明命令如下: 1heroku buildpacks:set heroku/php 注：使用上述命令出现卡顿时，可以直接在heroku的网页上进行操作。 设置 APP key 及绑定域名 Laravel 使用 App Key 来完成对用户会话及其它信息的编码加密操作，因此我们也需要将 App Key 加入到 Heroku 的配置中。 这里直接打开刚才创建目录中的 .env 文件，复制 APP_KEY参数。 将复制的 APP_KEY 附加到此命令行后面以完成配置: 1heroku config:set APP_KEY=xxx 同样由于授权登录，需要验证绑定域名，这里需要设置一下APP_URL 1heroku config:set APP_URL=xxx 将应用推送到 Heroku 上 将代码部署到Heroku上： 1git push heroku master 有类似如下的输出代表代码推送成功： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091Enumerating objects: 2010, done.Counting objects: 100% (2010/2010), done.Delta compression using up to 4 threadsCompressing objects: 100% (637/637), done.Writing objects: 100% (1934/1934), 301.98 KiB | 20.13 MiB/s, done.Total 1934 (delta 1332), reused 1872 (delta 1271)remote: Compressing source files... done.remote: Building source:remote:remote: -----&gt; PHP app detectedremote: -----&gt; Bootstrapping...remote: -----&gt; Installing platform packages...remote: - php (7.2.11)remote: - ext-mbstring (bundled with php)remote: - nginx (1.8.1)remote: - apache (2.4.34)remote: -----&gt; Installing dependencies...remote: Composer version 1.7.2 2018-08-16 16:57:12remote: Loading composer repositories with package informationremote: Installing dependencies from lock fileremote: Package operations: 48 installs, 0 updates, 0 removalsremote: - Installing doctrine/inflector (v1.3.0): Loading from cacheremote: - Installing doctrine/lexer (v1.0.1): Loading from cacheremote: - Installing dragonmantank/cron-expression (v2.2.0): Loading from cacheremote: - Installing erusev/parsedown (1.7.1): Loading from cacheremote: - Installing vlucas/phpdotenv (v2.5.1): Loading from cacheremote: - Installing symfony/css-selector (v4.1.6): Loading from cacheremote: - Installing tijsverkoyen/css-to-inline-styles (2.2.1): Loading from cacheremote: - Installing symfony/polyfill-php72 (v1.9.0): Loading from cacheremote: - Installing symfony/polyfill-mbstring (v1.9.0): Loading from cacheremote: - Installing symfony/var-dumper (v4.1.6): Loading from cacheremote: - Installing symfony/routing (v4.1.6): Loading from cacheremote: - Installing symfony/process (v4.1.6): Loading from cacheremote: - Installing symfony/polyfill-ctype (v1.9.0): Loading from cacheremote: - Installing symfony/http-foundation (v4.1.6): Loading from cacheremote: - Installing symfony/event-dispatcher (v4.1.6): Loading from cacheremote: - Installing psr/log (1.0.2): Loading from cacheremote: - Installing symfony/debug (v4.1.6): Loading from cacheremote: - Installing symfony/http-kernel (v4.1.6): Loading from cacheremote: - Installing symfony/finder (v4.1.6): Loading from cacheremote: - Installing symfony/console (v4.1.6): Loading from cacheremote: - Installing egulias/email-validator (2.1.6): Loading from cacheremote: - Installing swiftmailer/swiftmailer (v6.1.3): Loading from cacheremote: - Installing paragonie/random_compat (v9.99.99): Loading from cacheremote: - Installing ramsey/uuid (3.8.0): Loading from cacheremote: - Installing psr/simple-cache (1.0.1): Loading from cacheremote: - Installing psr/container (1.0.0): Loading from cacheremote: - Installing opis/closure (3.1.1): Loading from cacheremote: - Installing symfony/translation (v4.1.6): Loading from cacheremote: - Installing nesbot/carbon (1.34.0): Loading from cacheremote: - Installing monolog/monolog (1.23.0): Loading from cacheremote: - Installing league/flysystem (1.0.48): Loading from cacheremote: - Installing laravel/framework (v5.7.12): Loading from cacheremote: - Installing fideloper/proxy (4.0.0): Loading from cacheremote: - Installing guzzlehttp/promises (v1.3.1): Loading from cacheremote: - Installing psr/http-message (1.0.1): Loading from cacheremote: - Installing guzzlehttp/psr7 (1.4.2): Loading from cacheremote: - Installing jakub-onderka/php-console-color (v0.2): Loading from cacheremote: - Installing nikic/php-parser (v4.1.0): Loading from cacheremote: - Installing jakub-onderka/php-console-highlighter (v0.3.2): Loading from cacheremote: - Installing dnoegel/php-xdg-base-dir (0.1): Loading from cacheremote: - Installing psy/psysh (v0.9.9): Loading from cacheremote: - Installing laravel/tinker (v1.0.8): Loading from cacheremote: - Installing guzzlehttp/guzzle (6.3.3): Loading from cacheremote: - Installing league/oauth2-client (dev-master 15afb12): Loading from cacheremote: - Installing microsoft/microsoft-graph (1.5.0): Loading from cacheremote: - Installing caouecs/laravel-lang (3.0.56): Loading from cacheremote: - Installing overtrue/laravel-lang (3.0.13): Loading from cacheremote: - Installing predis/predis (v1.1.1): Loading from cacheremote: Generating optimized autoload filesremote: &gt; Illuminate\\Foundation\\ComposerScripts::postAutoloadDumpremote: &gt; @php artisan package:discoverremote: Discovered Package: fideloper/proxyremote: Discovered Package: laravel/tinkerremote: Discovered Package: nesbot/carbonremote: Discovered Package: overtrue/laravel-langremote: Package manifest generated successfully.remote: -----&gt; Preparing runtime environment...remote: -----&gt; Checking for additional extensions to install...remote: -----&gt; Discovering process typesremote: Procfile declares types -&gt; webremote:remote: -----&gt; Compressing...remote: Done: 19.2Mremote: -----&gt; Launching...remote: Released v5remote: https://imwnk-olaindex.herokuapp.com/ deployed to Herokuremote:remote: Verifying deploy... done.To https://git.heroku.com/imwnk-olaindex.git ab88070..42cd315 master -&gt; master 代码推送成功之后，使用此命令可快速打开线上应用： 1heroku open 至此，完成了OLAINDEX应用的部署，下面就是直接线上的账号绑定，和其他的云盘类似的过程。 注意 Heroku部署的应用在30分钟内没有访问，则会自动休眠，网上提供的方法是将站点加入云监控。此处，博主也是采用了类似的方法，可惜没有成功； Heroku重启或者更新后数据会恢复到初始状态，需要重新配置，所以还是建议用VPS搭建站点。","categories":[],"tags":[{"name":"建站","slug":"建站","permalink":"https://royccg.github.io/tags/%E5%BB%BA%E7%AB%99/"}],"keywords":[]},{"title":"国内外各种建站免费面板和一键包汇总","slug":"国内外各种建站免费面板和一键包汇总","date":"2019-05-17T06:16:11.000Z","updated":"2022-08-19T07:44:09.330Z","comments":true,"path":"2019/05/17/国内外各种建站免费面板和一键包汇总/","link":"","permalink":"https://royccg.github.io/2019/05/17/%E5%9B%BD%E5%86%85%E5%A4%96%E5%90%84%E7%A7%8D%E5%BB%BA%E7%AB%99%E5%85%8D%E8%B4%B9%E9%9D%A2%E6%9D%BF%E5%92%8C%E4%B8%80%E9%94%AE%E5%8C%85%E6%B1%87%E6%80%BB/","excerpt":"面板类： 国外： VestaCP：http://vestacp.com/ （比较推荐的面板，自带中文）Kloxo-MR：https://github.com/mustafaramadhan/kloxo/ （7.0真的很强大，很好看，很实用，有中文包）Webmin/Virtualmin：http://www.webmin.com/virtualmin.html （很稳定，很安全，自带中文）Ispconfig：https://github.com/dclardy64/ISPConfig-3-Debian-Installer （官网没看懂这是一键包，有中文包）","text":"面板类： 国外： VestaCP：http://vestacp.com/ （比较推荐的面板，自带中文）Kloxo-MR：https://github.com/mustafaramadhan/kloxo/ （7.0真的很强大，很好看，很实用，有中文包）Webmin/Virtualmin：http://www.webmin.com/virtualmin.html （很稳定，很安全，自带中文）Ispconfig：https://github.com/dclardy64/ISPConfig-3-Debian-Installer （官网没看懂这是一键包，有中文包）i-MSCP：http://i-mscp.net/ （简单易用，自带中文） EasySCP：http://www.easyscp.net/ （和i-MSCP一样来自Ispconfig，自带中文）Ajenti：http://ajenti.org/ （轻量级，类似Webmin，自带中文）zPanel(sentora)：http://www.zpanelcp.com/ http://www.sentora.org/（支持win，有中文包） centos webpanel：http://centos-webpanel.com/ （据说比较有发展前途）Froxlor：http://www.froxlor.org/ （很轻量的，适应各种环境）AlternC：https://alternc.org/ （简单）Easy Hosting Control Panel：http://ehcp.net/ （还不错的面板，有第三方汉化包） 国内： http://amh.sh/ （4.2版免费）http://www.wdlinux.cn/bbs/ （简单易用，近来爆出严重安全漏洞）http://www.zijidelu.org/ （支持freeBSD）http://www.kanglesoft.com/ （很好很强大） 一键包： 国外： http://centminmod.com/ （据说很适合wordpress）http://tuxlite.com/ （适用于Debian系列） https://github.com/Xeoncross/lowendscript （lowendscript演变来的） https://github.com/ComfortVPS/Nginx-PHP-MySql-phpMyAdmin （SFTP即可添加域名） https://github.com/mikegioia/Debian-Server （还是比较全面的） 国内： http://lnmp.org/ （用的人很多，适应性很强）http://teddysun.com/lamp （很好用的LAMP一键包） http://teddysun.com/lamp-yum （适合小内存≥64M）http://bbs.aliyun.com/read/151729.html （阿里云论坛看到的） http://blog.linuxeye.com/31.html （多种配置，软件较新） https://github.com/wangyan/lanmp （针对512M内存的VPS进行了优化）http://www.hhvmc.com/thread-17-1-1.html （有hhvm的一键包） http://shuang.ca/llnmp/ http://llsmp.cn/（有LiteSpeed的一键包） https://www.lxconfig.com/thread-69-1-1.html （有openresty的一键包）http://blog.7qy.com/html/1575.html （有cherokee的一键包）http://lamp.phpstudy.net/ （有Lighttpd的一键包） https://github.com/maxexcloo/Seervr https://github.com/teddysun/lamp-yum/ https://github.com/teddysun/lamp/ https://github.com/lj2007331/lnmp https://github.com/centos-bz/EZHTTP https://github.com/ielnehc/ltmh http://z.admin5.com/linux.php http://www.12345t.com/news/2014/0910/370.html http://www.vpsmate.org/ http://isp-control.net/ http://www.openpanel.com/ http://www.webuzo.com/downloads http://wp.geeklab.com.ar/gl/gnupanel/ http://www.blueonyx.it/ http://www.zentyal.org/ http://dtcsupport.gplhost.com/PmWiki/ http://lxcenter.org/software/kloxo http://www.ispconfig.org/files/file/2-ispconfig/ http://www.websitepanel.net/ http://www.west263.com/services/vhostsoft/ http://www.npointhost.com/index.html http://www.huweishen.com/soft/host/ http://winginx.com/en/ http://www.wampserver.com/en/ http://www.upupw.net/ http://www.phpstudy.net/","categories":[],"tags":[{"name":"建站","slug":"建站","permalink":"https://royccg.github.io/tags/%E5%BB%BA%E7%AB%99/"}],"keywords":[]},{"title":"安装基于onedrive的在线网盘-—Pyone","slug":"安装基于onedrive的在线网盘-—Pyone","date":"2019-05-17T05:21:25.000Z","updated":"2022-08-19T07:44:09.374Z","comments":true,"path":"2019/05/17/安装基于onedrive的在线网盘-—Pyone/","link":"","permalink":"https://royccg.github.io/2019/05/17/%E5%AE%89%E8%A3%85%E5%9F%BA%E4%BA%8Eonedrive%E7%9A%84%E5%9C%A8%E7%BA%BF%E7%BD%91%E7%9B%98-%E2%80%94Pyone/","excerpt":"之前博主介绍过一个OneDrive网盘的目录索引程序OneIndex，而且发了不少安装和使用教程了，介绍查看：OneIndex，今天再介绍个类似的工具PyOne，基于Flask开发的，由于是模仿的OneIndex，自然功能就差不多，就是界面好看很多，后台也可以直接上传编辑文件，目前作者新增多网盘和离线下载，该功能刚出来，BUG肯定是有的，可以向作者反映修复下，这里说一下安装教程。 截图","text":"之前博主介绍过一个OneDrive网盘的目录索引程序OneIndex，而且发了不少安装和使用教程了，介绍查看：OneIndex，今天再介绍个类似的工具PyOne，基于Flask开发的，由于是模仿的OneIndex，自然功能就差不多，就是界面好看很多，后台也可以直接上传编辑文件，目前作者新增多网盘和离线下载，该功能刚出来，BUG肯定是有的，可以向作者反映修复下，这里说一下安装教程。 截图 Demo地址 https://www.pyone.me 特性 1.简单易用。只需简单设置，即可做一个onedrive文件列表分享程序2.后台强大。 防盗链设置。 后台上传文件。 后台更新文件。 后台设置统计代码 后台管理onedrive文件。 删除onedrive文件 直接在后台给文件夹添加.password和README和HEAD 直接在后台编辑文本文件。 上传本地文件至onedrive(2018.10.18更新） 支持创建文件夹(2018.10.19更新） 支持移动文件（仅限单文件）(2018.10.19更新） 支持绑定多网盘！！！（2018.11.15更新） 支持搜索文件！！！（2019.01.18更新） 安装 Github地址：https://github.com/abbeyokgo/PyOne帮助文档：https://wiki.pyone.me/账号支持：只支持onedrive上夜班、教育版、个人版环境要求：Python2.7、Redis、Mongodb、Nginx 安装宝塔 123456#Centos系统yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; bash install.sh#Ubuntu系统wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh#Debian系统wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; bash install.sh 安装完成后，不需要进行初设置的那些安装。点击左侧软件管理，然后安装Redis、Mongodb、Nginx，其中Debian的linux版本安装Mongodb之前需要使用apt install sudo，不然可能出现Mongodb启动不了的情况。 拉取源码 1git clone https://github.com/abbeyokgo/PyOne.git 安装依赖 进入Pyone的文件夹，运行代码如下： 12cd /root/PyOnepip install -r requirements.txt 开始运行 1234#复制配置文件cp self_config.py.sample self_config.pycp supervisord.conf.sample supervisord.conftouch .install 请保证运行的目录在root的目录下，不然则需要修改self_config.py中的config_dir参数和supervisord.conf的directory参数为正确的目录。 12#运行gunicorn -w4 -b 0.0.0.0:34567 run:app 安装Aria2 123git clone https://github.com/abbeyokgo/aria2_installer.gitcd aria2_installersh install_aria2.sh 域名设置点击左侧网站，添加站点，然后再点击添加好了的域名名称，这时候就进入了站点配置，点击反向代理，目标URL填入http://127.0.0.1:34567，再启用反向代理即可。 然后再点击配置文件，进行如下修改：1234567891011#加上中间三句location / &#123; ... proxy_buffering off; proxy_cache off; proxy_set_header X-Forwarded-Proto $scheme; ... &#125;最后就可以进入域名打开授权页面了。授权成功即可，首次访问，会显示登录后台，输入初始密码：PyOne后会自动跳转到绑定网盘页面。如果没有跳转到绑定网盘页面，可以按照：后台-文件管理-添加网盘进行下一步。 开机启动网站源码下有个supervisord.conf，主要内容如下：1234[program:pyone]command = gunicorn -k eventlet -b 0.0.0.0:34567 run:appdirectory = /root/PyOneautorestart = true主要修改两个地方12端口号：即34567那个端口号，修改为自己选的，或者不改动源码目录：directory修改为你选的网站目录修改之后运行下面的命令（记得修改为正确的目录），设置开机启动：12echo &quot;supervisord -c /root/PyOne/supervisord.conf&quot; &gt;&gt; /etc/rc.d/rc.localchmod +x /etc/rc.d/rc.local重启生效。 本次不用重启生效的方法：1supervisord -c /root/PyOne/supervisord.conf 总结目前来说该程序很不错，特别是加了多网盘和离线下载，作者更新也频繁，但BUG还是不少的，特别是离线下载。","categories":[],"tags":[{"name":"建站","slug":"建站","permalink":"https://royccg.github.io/tags/%E5%BB%BA%E7%AB%99/"}],"keywords":[]},{"title":"权利的游戏 第八季","slug":"权利的游戏-第八季","date":"2019-05-06T11:36:33.000Z","updated":"2022-08-19T07:44:09.435Z","comments":true,"path":"2019/05/06/权利的游戏-第八季/","link":"","permalink":"https://royccg.github.io/2019/05/06/%E6%9D%83%E5%88%A9%E7%9A%84%E6%B8%B8%E6%88%8F-%E7%AC%AC%E5%85%AB%E5%AD%A3/","excerpt":"◎译 名 权力的游戏 第八季 / Game of Thrones: The Final Season / 权游8 ◎片 名 Game of Thrones Season 8 ◎年 代 2019 ◎产 地 美国 ◎类 别 剧情 / 奇幻 / 冒险 ◎语 言 英语 ◎上映日期 2019-04-14(美国) ◎IMDb链接 http://www.imdb.com/title/tt5924366/ ◎豆瓣评分 0/10 from 0 users ◎豆瓣链接 https://movie.douban.com/subject/26584183/ ◎集 数 6 ◎片 长 60分钟(E1-E2) / 80分钟(E3-E6) ◎导 演 米格尔·萨普什尼克 Miguel Sapochnik / 大卫·努特尔 David Nutter / 戴维·贝尼奥夫 David Benioff / D·B·威斯 D.B. Weiss ◎编 剧 戴维·贝尼奥夫 David Benioff / D·B·威斯 D.B. Weiss / 乔治·马丁 George R.R. Martin ◎主 演 艾米莉亚·克拉克 Emilia Clarke 基特·哈灵顿 Kit Harington 彼特·丁拉基 Peter Dinklage 苏菲·特纳 Sophie Turner 麦茜·威廉姆斯 Maisie Williams 琳娜·海蒂 Lena Headey 伊萨克·亨普斯特德-怀特 Isaac Hempstead-Wright 尼古拉·科斯特-瓦尔道 Nikolaj Coster-Waldau 约翰·C·布莱德利 John C. Bradley 阿尔菲·艾伦 Alfie Allen 皮鲁·埃斯贝克 Pilou Asbæk 格温多兰·克里斯蒂 Gwendoline Christie 利亚姆·坎宁安 Liam Cunningham ◎标 签 权力的游戏 | HBO | 美剧 | 史诗 | 魔幻 | 经典 | 奇幻 | 美国 ◎简 介 HBO剧集《权力的游戏》第八季将于2019年4月14日播出，本季共6集。 故事发展至第八季，重返临冬城的琼恩·雪诺（基特·哈灵顿 Kit Harington 饰）在布兰·史塔克（伊萨克·亨普斯特德-怀特 Isaac Hempstead-Wright 饰）口中得知了自己身世的秘密，让他与丹妮莉丝·塔格利安（艾米莉亚·克拉克 Emilia Clarke 饰）的关系蒙上了一层冰霜。詹姆·兰尼斯特（尼古拉·科斯特-瓦尔道 Nikolaj Coster-Waldau 饰）试图召集河间地驻军北伐异鬼，却发现艾德慕·徒利（托比亚斯·门基斯 Tobias Menzies 饰）已经包围你了奔流城。攸伦·葛雷乔伊（皮鲁·埃斯贝克 Pilou Asbæ 饰）将黄金团带至君临获取了瑟曦（琳娜·海蒂 Lena Headey 饰）的信任，而实际上，他已经与无面者贾昆·赫加尔（汤姆·拉斯齐哈 Tom Wlaschiha 饰）私下达成了秘密协议。","text":"◎译 名 权力的游戏 第八季 / Game of Thrones: The Final Season / 权游8 ◎片 名 Game of Thrones Season 8 ◎年 代 2019 ◎产 地 美国 ◎类 别 剧情 / 奇幻 / 冒险 ◎语 言 英语 ◎上映日期 2019-04-14(美国) ◎IMDb链接 http://www.imdb.com/title/tt5924366/ ◎豆瓣评分 0/10 from 0 users ◎豆瓣链接 https://movie.douban.com/subject/26584183/ ◎集 数 6 ◎片 长 60分钟(E1-E2) / 80分钟(E3-E6) ◎导 演 米格尔·萨普什尼克 Miguel Sapochnik / 大卫·努特尔 David Nutter / 戴维·贝尼奥夫 David Benioff / D·B·威斯 D.B. Weiss ◎编 剧 戴维·贝尼奥夫 David Benioff / D·B·威斯 D.B. Weiss / 乔治·马丁 George R.R. Martin ◎主 演 艾米莉亚·克拉克 Emilia Clarke 基特·哈灵顿 Kit Harington 彼特·丁拉基 Peter Dinklage 苏菲·特纳 Sophie Turner 麦茜·威廉姆斯 Maisie Williams 琳娜·海蒂 Lena Headey 伊萨克·亨普斯特德-怀特 Isaac Hempstead-Wright 尼古拉·科斯特-瓦尔道 Nikolaj Coster-Waldau 约翰·C·布莱德利 John C. Bradley 阿尔菲·艾伦 Alfie Allen 皮鲁·埃斯贝克 Pilou Asbæk 格温多兰·克里斯蒂 Gwendoline Christie 利亚姆·坎宁安 Liam Cunningham ◎标 签 权力的游戏 | HBO | 美剧 | 史诗 | 魔幻 | 经典 | 奇幻 | 美国 ◎简 介 HBO剧集《权力的游戏》第八季将于2019年4月14日播出，本季共6集。 故事发展至第八季，重返临冬城的琼恩·雪诺（基特·哈灵顿 Kit Harington 饰）在布兰·史塔克（伊萨克·亨普斯特德-怀特 Isaac Hempstead-Wright 饰）口中得知了自己身世的秘密，让他与丹妮莉丝·塔格利安（艾米莉亚·克拉克 Emilia Clarke 饰）的关系蒙上了一层冰霜。詹姆·兰尼斯特（尼古拉·科斯特-瓦尔道 Nikolaj Coster-Waldau 饰）试图召集河间地驻军北伐异鬼，却发现艾德慕·徒利（托比亚斯·门基斯 Tobias Menzies 饰）已经包围你了奔流城。攸伦·葛雷乔伊（皮鲁·埃斯贝克 Pilou Asbæ 饰）将黄金团带至君临获取了瑟曦（琳娜·海蒂 Lena Headey 饰）的信任，而实际上，他已经与无面者贾昆·赫加尔（汤姆·拉斯齐哈 Tom Wlaschiha 饰）私下达成了秘密协议。◎获奖情况 第5届豆瓣电影年度榜单(2018)最值得期待的剧集(提名) ◎ 剧集 第一集第二集第三集第四集","categories":[],"tags":[{"name":"影视","slug":"影视","permalink":"https://royccg.github.io/tags/%E5%BD%B1%E8%A7%86/"}],"keywords":[]},{"title":"陈一发-谢谢你的爱","slug":"陈一发-谢谢你的爱","date":"2019-05-05T06:36:14.000Z","updated":"2022-08-19T07:44:09.482Z","comments":true,"path":"2019/05/05/陈一发-谢谢你的爱/","link":"","permalink":"https://royccg.github.io/2019/05/05/%E9%99%88%E4%B8%80%E5%8F%91-%E8%B0%A2%E8%B0%A2%E4%BD%A0%E7%9A%84%E7%88%B1/","excerpt":"","text":"永远的67373 --> var dplayer4 = new DPlayer({\"element\":document.getElementById(\"dplayer4\"),\"autoplay\":0,\"theme\":\"#FADFA3\",\"loop\":1,\"video\":{\"url\":\"/2019/05/05/陈一发-谢谢你的爱/谢谢你的爱_陈一发.mp4\",\"pic\":\"15270359193790494.jpg\"}}); --> --> -->","categories":[],"tags":[{"name":"视频","slug":"视频","permalink":"https://royccg.github.io/tags/%E8%A7%86%E9%A2%91/"}],"keywords":[]},{"title":"Vps刷PT流量","slug":"Vps刷PT流量","date":"2019-05-02T06:58:41.000Z","updated":"2022-08-19T07:44:09.303Z","comments":true,"path":"2019/05/02/Vps刷PT流量/","link":"","permalink":"https://royccg.github.io/2019/05/02/Vps%E5%88%B7PT%E6%B5%81%E9%87%8F/","excerpt":"最近迷上了使用PT做种，其中很多PT站都需要完成新手任务。为了完成新手任务，并且是自动做种，考虑使用vps来自动做种。网上有很多不同的工具，本文章使用Transmission和FlexGet自动刷PT流量，使用Debian和Ubuntu的系统，在CentOS上的刷PT流量教程，考虑在后面重新做一期。本文章只适用Debian9和Ubuntu16以上的系统","text":"最近迷上了使用PT做种，其中很多PT站都需要完成新手任务。为了完成新手任务，并且是自动做种，考虑使用vps来自动做种。网上有很多不同的工具，本文章使用Transmission和FlexGet自动刷PT流量，使用Debian和Ubuntu的系统，在CentOS上的刷PT流量教程，考虑在后面重新做一期。本文章只适用Debian9和Ubuntu16以上的系统 一、安装Transmission12apt-get updateapt-get install transmission-daemon -y 现在开始修改配置，需要先停止运行Transmission：12/etc/init.d/transmission-daemon stopvim /var/lib/transmission-daemon/info/settings.json需要修改的部分如下：12345rpc-username 帐号rpc-password 密码&quot;rpc-authentication-required&quot;: true&quot;rpc-whitelist-enabled&quot;: false&quot;preallocation&quot;: 0启动程序：1/etc/init.d/transmission-daemon start通过http://ip:9091，可以访问transmission的webui。 二、安装FlexGet依次执行：123apt-get install -y python-pip python-setuptoolspip install --upgrade pippip2 install flexget 注：本人在Openvz上执行 upgrade pip时，总是显示 “locale.Error: unsupported locale setting” 原因是语言环境配置出错，执行一下的语句：1234567891011121314151617181920212223242526272829303132333435root@ubuntu:~# locale locale: Cannot set LC_ALL to default locale: No such file or directory LANG=en_US.UTF-8 LANGUAGE= LC_CTYPE=&quot;en_US.UTF-8&quot; LC_NUMERIC=zh_CN.UTF-8 LC_TIME=zh_CN.UTF-8 LC_COLLATE=&quot;en_US.UTF-8&quot; LC_MONETARY=zh_CN.UTF-8 LC_MESSAGES=&quot;en_US.UTF-8&quot; LC_PAPER=zh_CN.UTF-8 LC_NAME=zh_CN.UTF-8 LC_ADDRESS=zh_CN.UTF-8 LC_TELEPHONE=zh_CN.UTF-8 LC_MEASUREMENT=zh_CN.UTF-8 LC_IDENTIFICATION=zh_CN.UTF-8 LC_ALL=export LC_ALL=C root@ubuntu:~# locale LANG=en_US.UTF-8 LANGUAGE= LC_CTYPE=&quot;C&quot; LC_NUMERIC=&quot;C&quot; LC_TIME=&quot;C&quot; LC_COLLATE=&quot;C&quot; LC_MONETARY=&quot;C&quot; LC_MESSAGES=&quot;C&quot; LC_PAPER=&quot;C&quot; LC_NAME=&quot;C&quot; LC_ADDRESS=&quot;C&quot; LC_TELEPHONE=&quot;C&quot; LC_MEASUREMENT=&quot;C&quot; LC_IDENTIFICATION=&quot;C&quot; LC_ALL=C 配置FlexGet:12mkdir /root/.flexgetvim /root/.flexget/config.yml其中，编辑文本时，可以采用vi、vim和nano，看个人喜好。 FlexGet的配置文件示例：12345678910111213141516171819202122232425tasks: mt: rss: https://tp.m-team.cc/torrentrss.php?https=1&amp;rows=10&amp;linktype=dl&amp;passkey=xxxxxxxxxxxxxx accept_all: yes content_size: min: 256 max: 4000 download: /var/lib/transmission-daemon/torrents transmission: host: 127.0.0.1 port: 9091 username: username password: &quot;password&quot; ttg: rss: https://totheglory.im/putrss.php?par=xxxxxxx&amp;ssl=yes accept_all: yes content_size: min: 256 max: 4000 download: /var/lib/transmission-daemon/torrents transmission: host: 127.0.0.1 port: 9091 username: username password: &quot;password&quot;以上内容表示，只下载文件大小在256MB和4000MB之间的种子，用户名和密码为之前配置的transmission的。rss为pt网站订阅的rss地址。一般选择所有的就行了，TTG等网站需要注意最好不要覆盖那些带H&amp;R的内容（剧集）。 此处没有严格按照缩进原则，就会出现问题。要注意的是，由于配置文件是YAML格式，需要遵循YAML语法，也就是说，千万不要使用tab来缩进，一定要用空格。缩进是一定要遵守的，每个层级之间用两个空格缩进。 多个任务，在后面添加即可。 因为没有这个种子文件下载目录，需要先创建：1mkdir /var/lib/transmission-daemon/torrentsFlexGet配合transmission还需要插件支持：1pip2 install transmissionrpcFlexGet简单命令：12flexget check ： 用于检查 config.yml 配置文件是否有格式错误。flexget execute ： 手动开始一次 RSS 下载，就等于正式 RSS 了一次。可以执行一次flexget check，一般是没有问题的。 添加自动任务：1crontab -e在其中添加：1*/5 * * * * /usr/local/bin/flexget -c /root/.flexget/config.yml execute表示每5分钟更新一次RSS。 三、自动删除种子文件先创建Sheell文件：1vim trans_cleanup.sh其中内容为：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394#! /bin/bash#====================================================================# trans_cleanup.sh## Copyright (c) 2011, WangYan &lt;webmaster@wangyan.org&gt;# All rights reserved.# Distributed under the GNU General Public License, version 3.0.## Monitor disk space, If the Over, delete some files.## See: http://wangyan.org/blog/trans_cleanup.html## V0.2, since 2012-10-29#==================================================================== # The transmission remote login usernameUSERNAME=&quot;username&quot; # The transmission remote login passwordPASSWORD=&quot;password&quot; # The transmission download dirDLDIR=&quot;/var/lib/transmission-daemon/downloads&quot; # The maximum allowed disk (%)DISK_USED_MAX=&quot;90&quot; # Enable auto shutdown support (Disable=0, Enable=1)ENABLE_AUTO_SHUTDOWN=&quot;0&quot; # Log path settingsLOG_PATH=&quot;/var/log/trans_cleanup.log&quot; # Date time format settingDATA_TIME=$(date +&quot;%y-%m-%d %H:%M:%S&quot;) #==================================================================== dist_check()&#123; DISK_USED=`df -h $DLDIR | grep -v Mounted | awk &#x27;&#123;print $5&#125;&#x27; | cut -d &#x27;%&#x27; -f 1` DISK_OVER=`awk &#x27;BEGIN&#123;print(&#x27;$DISK_USED&#x27;&gt;&#x27;$DISK_USED_MAX&#x27;)&#125;&#x27;`&#125; dist_check if [ &quot;$DISK_OVER&quot; = &quot;1&quot; ];then for i in `transmission-remote --auth $USERNAME:$PASSWORD -l | grep 100% | grep Done | awk &#x27;&#123;print $1&#125;&#x27; | grep -v ID` do [ &quot;$i&quot; -gt &quot;0&quot; ] &amp;&amp; echo -n &quot;$DATA_TIME [Done] &quot; &gt;&gt; $LOG_PATH transmission-remote --auth $USERNAME:$PASSWORD -t $i --remove-and-delete &gt;&gt; $LOG_PATH 2&gt;&amp;1 [ &quot;$i&quot; -gt &quot;0&quot; ] &amp;&amp; sleep 10 &amp;&amp; dist_check [ &quot;$DISK_OVER&quot; = &quot;0&quot; ] &amp;&amp; break donefi if [ &quot;$DISK_OVER&quot; = &quot;1&quot; ];then for ii in `transmission-remote --auth $USERNAME:$PASSWORD -l | grep Stopped | awk &#x27;&#123;print $1&#125;&#x27; | grep -v ID` do [ &quot;$ii&quot; -gt &quot;0&quot; ] &amp;&amp; echo -n &quot;$DATA_TIME [Stopped] &quot; &gt;&gt; $LOG_PATH transmission-remote --auth $USERNAME:$PASSWORD -t $ii --remove-and-delete &gt;&gt; $LOG_PATH 2&gt;&amp;1 [ &quot;$ii&quot; -gt &quot;0&quot; ] &amp;&amp; sleep 10 &amp;&amp; dist_check [ &quot;$DISK_OVER&quot; = &quot;0&quot; ] &amp;&amp; break donefi if [ &quot;$DISK_OVER&quot; = &quot;1&quot; ];then for iii in `transmission-remote --auth $USERNAME:$PASSWORD -l | grep -v Sum | awk &#x27;&#123;print $1&#125;&#x27; | grep -v ID` do [ &quot;$iii&quot; -gt &quot;0&quot; ] &amp;&amp; echo -n &quot;$DATA_TIME [Up or Down] &quot; &gt;&gt; $LOG_PATH transmission-remote --auth $USERNAME:$PASSWORD -t $iii --remove-and-delete &gt;&gt; $LOG_PATH 2&gt;&amp;1 [ &quot;$iii&quot; -gt &quot;0&quot; ] &amp;&amp; sleep 10 &amp;&amp; dist_check [ &quot;$DISK_OVER&quot; = &quot;0&quot; ] &amp;&amp; break donefi if [ &quot;$DISK_OVER&quot; = &quot;1&quot; ];then rm -rf $DLDIR/*fi if [ &quot;$ENABLE_AUTO_SHUTDOWN&quot; = &quot;1&quot; ];then SHUTDOWN=1 for STATUS in `transmission-remote --auth $USERNAME:$PASSWORD -l | awk &#x27;&#123;print $9&#125;&#x27;` do if [[ &quot;$STATUS&quot; = &quot;Up&quot; || &quot;$STATUS&quot; = &quot;Uploading&quot; ]];then SHUTDOWN=0 fi done TASK_TOTAL=`transmission-remote --auth $USERNAME:$PASSWORD -l | grep -Ev &#x27;(ID|Sum)&#x27; | wc -l` if [ &quot;$TASK_TOTAL&quot; -gt &quot;0&quot; ] &amp;&amp; [ &quot;$SHUTDOWN&quot; -eq &quot;1&quot; ];then echo -n &quot;$DATA_TIME &quot; &gt;&gt; $LOG_PATH shutdown now &gt;&gt; $LOG_PATH 2&gt;&amp;1 fifi自行修改其中的username和password，以及DISK_USED_MAX=”90″，这个数值表示最大可占用的硬盘空间，超过以后就会自动删除pt种子。不要设置太大，谨防下载速度太快爆硬盘，会导致服务器无法连接。 创建自动任务，在crontab里添加： */1 * * * * /bin/bash /root/trans_cleanup.sh 每分钟检查一次硬盘空间占用。 注意：如果硬盘空间太小，可能会导致每个种子的分享率不高，按需要调节每个种子文件大小限制，或者减少添加的task。 文中内容，参考转载自：https://www.ljchen.com/archives/963","categories":[],"tags":[{"name":"PT","slug":"PT","permalink":"https://royccg.github.io/tags/PT/"}],"keywords":[]},{"title":"搭建Hexo博客","slug":"搭建HEXO博客","date":"2019-03-17T09:46:55.000Z","updated":"2022-08-19T07:44:09.379Z","comments":true,"path":"2019/03/17/搭建HEXO博客/","link":"","permalink":"https://royccg.github.io/2019/03/17/%E6%90%AD%E5%BB%BAHEXO%E5%8D%9A%E5%AE%A2/","excerpt":"前言 我是一个入门的Blog主，暂时Blog中很多东西都是向其他博主那借鉴过来的，包括这篇搭建教程，很多内容也需要和大家一起探讨，blog的后续很多装饰也需要慢慢探索，希望大家能看到我的成长，最后自己生产出来一些内容，希望大家及时指正。","text":"前言 我是一个入门的Blog主，暂时Blog中很多东西都是向其他博主那借鉴过来的，包括这篇搭建教程，很多内容也需要和大家一起探讨，blog的后续很多装饰也需要慢慢探索，希望大家能看到我的成长，最后自己生产出来一些内容，希望大家及时指正。 Hexo的优势 本身的优势 正如Hexo官网的描述： 快速、简洁、高效的博客框架 支持Markdown语法 丰富的插件 与Jekyll的对比 Hexo官方有中文开发文档，而JekyII只有中文翻译文档且更新慢 JekyII的依赖环境总是出现问题 Hexo有详细且丰富的第三方接口 关于Github Github的优点 Github是基于git实现的代码托管平台。git可能是目前最好用的版本控制系统，非常受欢迎。 Github可以免费使用，并且快速稳定。 Github上面有很多有趣的项目，也有很多和生活息息相关的内容，比如“996”(手动狗头) 关于Github Page Github Page是供用户编写的、托管在Github上的静态网页。 为什么选择Github Page 可以绑定自己的域名 简单便捷，使用Github Page可以为你提供给一个免费的服务器，免去了自己搭建服务器和写数据库的麻烦。 安装Node.js 在window上安装Node.js非常简单，在官网下载文件并执行安装即可。我是window 64位系统，直接下载相应的版本，无脑下一步就行了，不需要另外配置环境变量。 安装Git 去Git官网根据你的电脑参数，下载对应版本。 下载完成，通过在命令行输入 git version 查看是否安装成功，有输出版本号说明安装成功。 鼠标右键菜单里就多了Git GUI Here和Git Bash Here两个按钮，一个是图形界面的Git操作，一个是命令行，我们选择Git Bash Here。 安装教程：如何在windows下安装GIT Git入门教程：Pro Git（中文版）、教学 Hexo Hexo是一个快速、简洁且高效的博客框架。Hexo使用Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 Hexo安装桌面右键鼠标，点击 Git Bash Here，输入一下命令安装1npm install hexo-cli -g 第一句是安装Hexo，第二句是安装Hexo部署到git page的deployer，两个都需要安装。 Hexo初始化配置 创建Hexo文件夹 安装完成后，根据自己喜好建立目录（如D:\\ROY\\blog\\myblog），直接进入D:\\ROY\\blog\\myblog文件夹下右键鼠标，点击Git Bash Here，进入Git命令框，执行以下操作。 1hexo init 安装完成后，Hexo将会在指定文件夹中新建所需的文件。Hexo文件夹下的目录如下图所示： 本地查看效果 执行下面语句，执行完即可在浏览器中输入localhost:4000查看本地网页效果 12hexo ghexo s 创建Github Page 那么现在本地的博客已经搭建起来了，但是我们只可以通过本地连接查看我们的博客。那么我们现在需要做的就是把本地的博客发布到服务器上，让别人也可以连接我们的博客，而Github Pages就帮我完成了这件事情。但是Github Pages的代码就是寄存在Github上面的。那么接下来我们需要在Github上面创建一个新的项目。 一、注册Github账户1.访问Github首页2.点击右上角的Sign up，注册自己的账号 二、创建项目代码库1.注册完登陆后，创建一个自己的Github Pages项目。点击 New repository注意：Github中仅能使用一个同名仓库的代码托管一个静态站点。 2.然后打开仓库创建一个index.html文件，先随意写上一些内容。3.这时候打开 http://你的用户名.github.io就可以看到你的站点了。此时，只是暂时渲染了 index.html的内容，后面把Hexo的引擎渲染出来的文件部署上来就可以看到完整的blog内容了。 三、配置SSH key关于 ssh 连接到 github部分的内容，可以参考官方的文档，此处不多做赘述。 部署到GitHub 此处采用Next的blog模板进行部署。 1、clone模板文件下载 在 博客的源目录下面运行 1git clone https://github.com/theme-next/hexo-theme-next themes/next 此时文件夹的tree是 12345678910111213141516171819202122232425262728293031323334353637383940.|-- _config.landscape.yml|-- _config.yml ------&gt; blog的配置文件|-- db.json|-- node_modules| |-- JSONStream| |-- ......| `-- wrappy|-- package-lock.json|-- package.json|-- public -----&gt; 渲染出来的index.html放置文件夹| |-- 2020| |-- archives| |-- css| |-- fancybox| |-- index.html| `-- js|-- scaffolds| |-- draft.md| |-- page.md| `-- post.md|-- source ----&gt; 后面 内容编辑 文件夹| `-- _posts`-- themes `-- next ----&gt; 下载下来的 `next`模板 |-- LICENSE.md |-- README.md |-- _config.yml -----&gt; next模板的配置文件 |-- crowdin.yml |-- docs |-- gulpfile.js |-- languages |-- layout |-- package.json |-- scripts `-- source |-- css |-- images -----&gt; 主题的 picture目录 |-- js `-- lib 2、Next安装配置 blog的配置文件_config.yml中的修改 使用 文本程序 打开当前目录下blog的配置文件_config.yml文件，在底端可以找到theme键，修改为next。 网页的总设置： 网站的标题、作者等 在 next模板的配置文件 _config.yml中： Next有4个分支主题，可以在修改配置文件中的scheme，激活一个你喜欢的分支主题； 头像在themes\\next\\source\\images中同名替换avatar文件 网站标签页图片：themes\\next\\source\\images中的favicon-16x16-next.png文件同名替换。 3、网站关联GitHub 在blog的配置文件_config.yml中的最后修改为 12345deploy: type: git repository: git@github.com:username/username.github.io.git # username是github用户名 branch: master 添加域名 在blog的源目录下 创建CNRME文件，无后缀，内容添加为 域名 4、部署运行 安装上传git的插件 1npm install hexo-deployer-git --save 在源目录下分别执行 123hexo clean //清理缓存hexo g //生成静态页面hexo d // 网站push 到github上 这样就可在 你的域名上 欣赏你的blog了，加油，bloger！","categories":[],"tags":[{"name":"建站","slug":"建站","permalink":"https://royccg.github.io/tags/%E5%BB%BA%E7%AB%99/"}],"keywords":[]},{"title":"Hello World","slug":"hello-world","date":"2019-03-17T06:10:58.000Z","updated":"2022-08-19T07:44:09.304Z","comments":true,"path":"2019/03/17/hello-world/","link":"","permalink":"https://royccg.github.io/2019/03/17/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]},{"title":"my first blog","slug":"my-first-blog","date":"2019-03-17T06:09:58.000Z","updated":"2022-08-19T07:44:09.319Z","comments":true,"path":"2019/03/17/my-first-blog/","link":"","permalink":"https://royccg.github.io/2019/03/17/my-first-blog/","excerpt":"","text":"my first blog.Hello World! 小结这是我第一个搭建的博客，在硕士毕业将近的时候，花费时间在搭建博客上，也是为能够在以后日子里面能够有所总结。除此之外，我对makedown的写法还不熟悉，现在也在学习 makedown和latex。 总之，记得为我加油！","categories":[],"tags":[{"name":"生活","slug":"生活","permalink":"https://royccg.github.io/tags/%E7%94%9F%E6%B4%BB/"}],"keywords":[]}]}